//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "GRXWriter.h"

#import "GRXWriteable-Protocol.h"

@class GRPCCallOptions, GRPCConnectivityMonitor, GRPCRequestHeaders, GRPCWrappedCall, GRXConcurrentWriteable, NSDictionary, NSMutableArray, NSMutableDictionary, NSObject, NSString;
@protocol GRPCAuthorizationProtocol, OS_dispatch_queue;

@interface GRPCCall : GRXWriter <GRXWriteable>
{
    NSObject<OS_dispatch_queue> *_callQueue;
    NSString *_host;
    NSString *_path;
    unsigned long long _callSafety;
    GRPCCallOptions *_callOptions;
    GRPCWrappedCall *_wrappedCall;
    GRPCConnectivityMonitor *_connectivityMonitor;
    GRXConcurrentWriteable *_responseWriteable;
    GRXWriter *_requestWriter;
    GRPCCall *_retainSelf;
    GRPCRequestHeaders *_requestHeaders;
    _Bool _unaryCall;
    NSMutableArray *_unaryOpBatch;
    NSObject<OS_dispatch_queue> *_responseQueue;
    NSString *_fetchedOauth2AccessToken;
    long long _state;
    NSDictionary *_responseHeaders;
    NSDictionary *_responseTrailers;
    NSString *_serverName;
    double _timeout;
}

+ (unsigned int)callFlagsForHost:(id)arg1 path:(id)arg2;
+ (void)closeOpenConnections;
+ (void)enableRetry:(_Bool)arg1 forHost:(id)arg2;
+ (void)initialize;
+ (id)logConfig;
+ (void)resetHostSettings;
+ (void)setCallSafety:(unsigned long long)arg1 host:(id)arg2 path:(id)arg3;
+ (void)setDefaultCompressMethod:(unsigned long long)arg1 forhost:(id)arg2;
+ (void)setKeepaliveWithInterval:(int)arg1 timeout:(int)arg2 forHost:(id)arg3;
+ (void)setLogConfig:(id)arg1;
+ (void)setMinConnectTimeout:(unsigned int)arg1 initialBackoff:(unsigned int)arg2 maxBackoff:(unsigned int)arg3 forHost:(id)arg4;
+ (void)setResponseSizeLimit:(unsigned long long)arg1 forHost:(id)arg2;
+ (_Bool)setTLSPEMRootCerts:(id)arg1 forHost:(id)arg2 error:(id *)arg3;
+ (_Bool)setTLSPEMRootCerts:(id)arg1 withPrivateKey:(id)arg2 withCertChain:(id)arg3 forHost:(id)arg4 error:(id *)arg5;
+ (void)setUserAgentPrefix:(id)arg1 forHost:(id)arg2;
+ (void)useInsecureConnectionsForHost:(id)arg1;
+ (void)useTestCertsPath:(id)arg1 testName:(id)arg2 forHost:(id)arg3;
- (void).cxx_destruct;
- (void)cancel;
- (void)connectivityChanged:(id)arg1;
- (void)dealloc;
- (void)finishRequestWithErrorHandler:(CDUnknownBlockType)arg1;
- (void)finishWithError:(id)arg1;
- (id)initWithHost:(id)arg1 path:(id)arg2 callSafety:(unsigned long long)arg3 requestsWriter:(id)arg4 callOptions:(id)arg5;
- (id)initWithHost:(id)arg1 path:(id)arg2 requestsWriter:(id)arg3;
- (void)invokeCall;
- (void)invokeCallWithHeadersHandler:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property(copy) NSString *oauth2AccessToken;
@property(readonly, copy) NSString *oauth2ChallengeHeader;
@property(readonly) NSMutableDictionary *requestHeaders; // @synthesize requestHeaders=_requestHeaders;
@property(retain) NSDictionary *responseHeaders; // @synthesize responseHeaders=_responseHeaders;
@property(retain) NSDictionary *responseTrailers; // @synthesize responseTrailers=_responseTrailers;
- (void)sendHeaders;
@property(copy) NSString *serverName; // @synthesize serverName=_serverName;
- (void)setResponseDispatchQueue:(id)arg1;
- (void)setState:(long long)arg1;
@property double timeout; // @synthesize timeout=_timeout;
@property(retain) id <GRPCAuthorizationProtocol> tokenProvider; // @dynamic tokenProvider;
- (void)startCallWithWriteable:(id)arg1;
- (void)startNextRead;
- (void)startReadWithHandler:(CDUnknownBlockType)arg1;
- (void)startWithWriteable:(id)arg1;
- (long long)state;
- (void)writeMessage:(id)arg1 withErrorHandler:(CDUnknownBlockType)arg2;
- (void)writeValue:(id)arg1;
- (void)writesFinishedWithError:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

