//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "SCEffectViewportManagerContainer-Protocol.h"

@class NSSet, NSString, SCCameraLensesUIController, SCLens, SCLensesUIAppearanceConfiguration, SCLensesUIControllerState, SCLongPressGestureRecognizer, SCManagedCapturerState, UIGestureRecognizer, UITapGestureRecognizer, UIView;
@protocol LSASnapRecordingComponentListener, SCLensCameraScreenDataProviderProtocol, SCLensProcessingCore, SCLensUserSessionProvider;

@protocol SCCameraViewControllerLensDelegate <SCEffectViewportManagerContainer>
- (SCLens *)activeLensForState:(SCLensesUIControllerState *)arg1;
- (void)applyCurrentLensIconToCameraButton;
- (_Bool)areLensesActive;
- (_Bool)areLensesAllInterfaceElementsHidden;
- (_Bool)areLensesOnboardingTooltipsCompleted;
- (_Bool)blockTouchesForCurrentLens;
- (_Bool)blockTouchesForCurrentLensWithNormalizedTouchPoints:(NSSet *)arg1 touchTypeMask:(unsigned long long)arg2;
- (void)clearExpiredLensPersistentStoragesInBackground;
- (id <SCLensCameraScreenDataProviderProtocol>)createLensDataProviderWithUserSessionProvider:(id <SCLensUserSessionProvider>)arg1;
- (void (^)(NSError *))defaultErrorHandlerWithSelector:(SEL)arg1;
- (void)dismissLensOperaPresenterWithDidBackground:(_Bool)arg1;
- (void)exitLensFullScreenModeIfNeeded;
@property(nonatomic) _Bool frontCameraActiveForLogging;
- (void)hideKeyboardIfNecessary;
- (void)hideLensUIControllerAnimated:(_Bool)arg1;
- (_Bool)isAnyLensActivationAllowed;
- (_Bool)isAnyLensTouchProcessingGestureRecognizer:(UIGestureRecognizer *)arg1;
- (_Bool)isCurrentLensFetched;
- (_Bool)isCurrentLensSnappable;
- (_Bool)isLensDisplayable;
- (_Bool)isLensLongPressGestureRecognizer:(UIGestureRecognizer *)arg1;
- (_Bool)isLensPanGestureRecognizer:(UIGestureRecognizer *)arg1;
- (_Bool)isLensPinchGestureRecognizer:(UIGestureRecognizer *)arg1;
- (_Bool)isLensRotationGestureRecognizer:(UIGestureRecognizer *)arg1;
- (_Bool)isLensTapGestureRecognizer:(UIGestureRecognizer *)arg1;
- (_Bool)isLensTouchProcessingGestureRecognizer:(UIGestureRecognizer *)arg1;
- (_Bool)isPlayingSnappable;
- (_Bool)lensCameraTooltipEnabled;
- (void)lensContainerTapped;
- (SCLensesUIControllerState *)lensControllerState;
@property(readonly, nonatomic) id <SCLensProcessingCore> lensProcessingCore;
@property(readonly, nonatomic) NSString *lensSessionId;
- (_Bool)lensTouchProcessingActive;
- (void)lensWillUnlock;
- (UIView *)lensesCollectionView;
- (_Bool)lensesDisallowSnapRecording;
- (SCCameraLensesUIController *)lensesUIController;
- (void)logCameraToggledWithAction:(long long)arg1 recording:(_Bool)arg2;
- (void)logRecordingStarted;
- (void)logRecordingStopped;
- (void)pauseDataFetcherDownloads;
- (_Bool)pointInsideAnyLensView:(struct CGPoint)arg1;
- (_Bool)pointInsideAnyLensViewButton:(struct CGPoint)arg1;
- (_Bool)pointInsideLensInfoButton:(struct CGPoint)arg1;
- (_Bool)pointInsideLensLogoPicker:(struct CGPoint)arg1;
- (void)removeSnapRecordingComponentListener:(id <LSASnapRecordingComponentListener>)arg1;
- (void)resetLensSubPickerActiveOptionIds;
- (void)resetTextInputIfNecessary;
- (void)restartTrackingWithNormalizedPoint:(struct CGPoint)arg1 completion:(void (^)(NSError *))arg2;
- (void)resumeDataFetcherDownloads;
- (void)selectLensWithIdIfPossible:(NSString *)arg1;
- (void)setDevicePosition:(unsigned long long)arg1;
- (void)setLensCarouselHidden:(_Bool)arg1;
- (void)setLensesCollectionViewScrollEnabled:(_Bool)arg1;
- (void)setMemoriesGalleryButtonHidden:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setUpLensProcessorDependants;
- (void)setUpLensesWithLensDataProvider:(id <SCLensCameraScreenDataProviderProtocol>)arg1;
- (void)showAdInfoForLens:(SCLens *)arg1;
- (void)showCallToActionViewForLens:(SCLens *)arg1;
- (void)showLensUIControllerAnimated:(_Bool)arg1;
- (void)showScanCardForThirdPartyLens:(SCLens *)arg1;
- (_Bool)tryToActivateLensesWithActivationState:(SCLensesUIControllerState *)arg1 completion:(void (^)(_Bool, NSString *))arg2;
- (_Bool)tryToActivateLensesWithLongPressGestureRecognizer:(SCLongPressGestureRecognizer *)arg1 originalPoint:(struct CGPoint)arg2 retryOnFailure:(_Bool)arg3 completion:(void (^)(_Bool, NSString *))arg4;
- (_Bool)tryToActivateLensesWithTapGestureRecognizer:(UITapGestureRecognizer *)arg1 originalPoint:(struct CGPoint)arg2 completion:(void (^)(_Bool, NSString *))arg3;
- (void)turnLensesOff;
- (void)turnLensesOffWithCompletion:(void (^)(void))arg1;
- (void)turnLensesOn;
- (SCLens *)turnLensesOnAndSelectFirstApplicableLens;
- (SCLens *)turnLensesOnAndSelectFirstApplicableLensWithActivationType:(unsigned long long)arg1;
- (void)turnLensesOnWithActivationParameters:(SCLensesUIAppearanceConfiguration *)arg1 activationState:(SCLensesUIControllerState *)arg2;
- (void)turnLensesOnWithActivationParameters:(SCLensesUIAppearanceConfiguration *)arg1 activationState:(SCLensesUIControllerState *)arg2 completion:(void (^)(void))arg3;
- (void)turnLensesOnWithActivationState:(SCLensesUIControllerState *)arg1;
- (_Bool)updateLensCarouselVisibilityForState:(SCManagedCapturerState *)arg1 showBirthdayReplyLens:(_Bool)arg2 animated:(_Bool)arg3;
- (void)updateLensDataProvider:(id <SCLensCameraScreenDataProviderProtocol>)arg1;
- (void)updateLensDataProviderWithCameraType:(long long)arg1 ownerContextDescription:(NSString *)arg2;
- (void)updateLensDataStore;
@end

