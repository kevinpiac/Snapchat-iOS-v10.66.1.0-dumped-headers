//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "LSAEffectComponentListener-Protocol.h"
#import "LSATouchProcessingDelegate-Protocol.h"
#import "LSATrackingComponentListener-Protocol.h"
#import "SCCrashedLensIdProvider-Protocol.h"
#import "SCLensBitmojiAlertUIControllerDelegate-Protocol.h"
#import "SCLensCarouselPresenterDelegate-Protocol.h"
#import "SCLensHintPresenterDelegate-Protocol.h"
#import "SCTraceEnabled-Protocol.h"

@class LSATouchProcessingController, NSString, SCAlertViewActionButtonController, SCIdleTimerManager, SCLensBitmojiAlertUIController, SCLensBitmojiProvider, SCLensCarouselPresenter, SCLensCompassAndLocationProvider, SCLensDownloadableContent, SCLensGeoDataProvider, SCLensHintPresenter, SCLensHintProvider, SCLensInCameraUsageNotifier, SCLensLayoutProvider, SCLensPhotoFaceImageProvider, SCLensPresetImageProvider, SCLensRemoteAssetsDataProvider, SCLensSbSnappable, SCLensStudioSyncManager, SCLensTapToActivateLogger, SCLensUIUpdateListenerAnnouncer, SCLensUriServiceProvider, SCLensUriServiceSonicAssetHandler, SCLensUserDataProvider, SCLensUserInterfaceTooltipPresenter, SCLensValidator, SCLensesUIControllerState, SCLoadingIndicatorView, SCPreferences, SCSponsoredSlugInteractiveView, UICollectionView, UILabel, UITapGestureRecognizer, UIView;
@protocol SCCameraAdInfoPresenterProtocol, SCDownloadableContentManaging, SCFeatureToggleCameraButton, SCLensCompoundLogger, SCLensConversationMetadataProvider, SCLensDataProviderProtocol, SCLensGestureViewProvider, SCLensProcessingCore, SCLensSharedStateControllerProvider, SCLensSubPickerControllerProtocol, SCLensTestSessionFactoryProtocol, SCLensTestSessionProtocol, SCLensTextInputProvider, SCLensUsageTrackerProtocol, SCLensUserInterfaceDelegate, SCLensUserProvider, SCSnappablesFutureProvider, UIGestureRecognizerDelegate;

@interface SCBaseLensesUIController : NSObject <SCTraceEnabled, LSATouchProcessingDelegate, LSATrackingComponentListener, SCLensHintPresenterDelegate, SCCrashedLensIdProvider, LSAEffectComponentListener, SCLensCarouselPresenterDelegate, SCLensBitmojiAlertUIControllerDelegate>
{
    SCLensRemoteAssetsDataProvider *_lensRemoteAssetsDataProvider;
    SCLensCompassAndLocationProvider *_compassAndLocationProvider;
    SCLensUriServiceProvider *_uriServiceProvider;
    id <SCSnappablesFutureProvider> _snappablesFutureProvider;
    id <SCLensTextInputProvider> _textInputProvider;
    SCLensUriServiceSonicAssetHandler *_sonicAssetHandler;
    id <SCLensSharedStateControllerProvider> _sharedStateControllerProvider;
    _Bool _blockCameraTouches;
    SCLensTapToActivateLogger *_tapToActivateLogger;
    SCLensHintPresenter *_hintPresenter;
    SCLensUserInterfaceTooltipPresenter *_userInterfaceTooltipPresenter;
    SCLensHintProvider *_hintProvider;
    id <SCLensUsageTrackerProtocol> _lensUsageTracker;
    SCLensInCameraUsageNotifier *_lensUsageNotifier;
    SCLensValidator *_lensValidator;
    SCLensStudioSyncManager *_lensStudioSyncManager;
    SCLensDownloadableContent *_lensDownloadableContent;
    SCIdleTimerManager *_idleTimerManager;
    SCAlertViewActionButtonController *_modalOkButton;
    id <SCLensTestSessionProtocol> _lensTestSession;
    id <SCLensTestSessionFactoryProtocol> _lensTestSessionFactory;
    id <SCDownloadableContentManaging> _downloadableContentManager;
    UICollectionView *_lensesCollectionView;
    UIView *_lensDownloadOverlay;
    id <SCLensSubPickerControllerProtocol> _lensSubPickerController;
    SCLensPresetImageProvider *_lensSubPickerPresetImageProvider;
    SCLensPhotoFaceImageProvider *_lensSubPickerPhotoFaceImageProvider;
    CDUnknownBlockType _lensSubPickerPhotoFaceImageProviderDeallocBlock;
    LSATouchProcessingController *_touchProcessingController;
    SCLensBitmojiAlertUIController *_lensBitmojiAlertUIController;
    SCLensBitmojiProvider *_lensBitmojiProvider;
    SCLensUserDataProvider *_lensUserDataProvider;
    SCLensGeoDataProvider *_lensGeoDataProvider;
    NSString *_lensDataProviderToken;
    SCLensLayoutProvider *_lensLayoutProvider;
    id <SCLensProcessingCore> _lensProcessingCore;
    id <SCLensUserProvider> _lensUserProvider;
    _Bool _lensesActive;
    SCLensUIUpdateListenerAnnouncer *_uiUpdateAnnouncer;
    UITapGestureRecognizer *_downloadOverlayTapGestureRecognizer;
    UITapGestureRecognizer *_sponsoredSlugTapGestureRecognizer;
    id <SCCameraAdInfoPresenterProtocol> _adInfoPresenter;
    id <SCLensDataProviderProtocol> _lensDataProvider;
    SCLensCarouselPresenter *_mainCarouselPresenter;
    UIView<SCLensGestureViewProvider> *_parentView;
    UIView *_hidableViewContainer;
    id <UIGestureRecognizerDelegate> _gestureRecognizerDelegate;
    id <SCLensConversationMetadataProvider> _conversationMetadataProvider;
    id <SCLensUserInterfaceDelegate> _lensUserInterfaceDelegate;
    id <SCFeatureToggleCameraButton> _toggleCameraButton;
    id <SCLensCompoundLogger> _lensLogger;
    SCPreferences *_userPreferences;
    UILabel *_lensHintLabel;
    UILabel *_tapToDownloadLabel;
    SCSponsoredSlugInteractiveView *_sponsoredSlugView;
    UIView *_lensLoadingIndicatorBackground;
    SCLoadingIndicatorView *_lensLoadingIndicator;
    UILabel *_demoLensWarningLabel;
    UILabel *_demoLensReleaseDateLabel;
    SCLensesUIControllerState *_state;
    NSString *_lensActivatorId;
}

- (void).cxx_destruct;
- (void)_createTapToActivateLoggerForLens:(id)arg1;
- (void)_hideLensModalCard;
- (void)_hideSubPicker;
- (_Bool)_pointInsideLensView:(struct CGPoint)arg1 cellFramesOnly:(_Bool)arg2;
- (void)_prepareLensDownloadOverlay;
- (void)_saveSubPickerActiveOptionId;
- (void)_showLensModalCardWithTitleId:(id)arg1 descriptionId:(id)arg2;
- (void)_showSubPickerWithFaceFilteringEnabled:(_Bool)arg1;
- (double)_slugVerticalMargin;
- (void)_updateTapToActivateLoggerForLens:(id)arg1;
- (void)activateLens:(id)arg1 launchData:(id)arg2 setLensCompletion:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
@property(readonly, nonatomic) __weak id <SCCameraAdInfoPresenterProtocol> adInfoPresenter; // @synthesize adInfoPresenter=_adInfoPresenter;
@property(readonly, nonatomic) SCLensSbSnappable *appliedSnappablesMetadata;
- (void)applyCollectionViewConstraints:(id)arg1;
- (void)applyLens:(id)arg1 launchData:(id)arg2;
@property(nonatomic, getter=areLensesActive) _Bool lensesActive; // @synthesize lensesActive=_lensesActive;
@property(readonly, nonatomic) _Bool blockTouchesForCurrentLens;
- (_Bool)canAutoselectLensOnScroll;
- (void)cleanup;
- (void)clearLens;
@property(nonatomic) __weak id <SCLensConversationMetadataProvider> conversationMetadataProvider; // @synthesize conversationMetadataProvider=_conversationMetadataProvider;
- (id)currentCarouselPresenter;
- (void)dealloc;
@property(retain, nonatomic) UILabel *demoLensReleaseDateLabel; // @synthesize demoLensReleaseDateLabel=_demoLensReleaseDateLabel;
@property(retain, nonatomic) UILabel *demoLensWarningLabel; // @synthesize demoLensWarningLabel=_demoLensWarningLabel;
- (void)downloadCurrentLensIfNecessary;
@property(retain, nonatomic) UITapGestureRecognizer *downloadOverlayTapGestureRecognizer; // @synthesize downloadOverlayTapGestureRecognizer=_downloadOverlayTapGestureRecognizer;
- (void)downloadRegressorIfNecessaryWithCompletion:(CDUnknownBlockType)arg1;
- (void)effectComponent:(id)arg1 didTurnOffEffectWithId:(id)arg2 features:(unsigned long long)arg3;
- (void)effectComponent:(id)arg1 didTurnOnEffectWithId:(id)arg2 features:(unsigned long long)arg3;
- (void)effectComponent:(id)arg1 effectId:(id)arg2 performHapticFeedback:(unsigned long long)arg3;
- (void)effectComponent:(id)arg1 effectId:(id)arg2 performInterfaceAction:(unsigned long long)arg3 interfaceElement:(unsigned long long)arg4 interfaceData:(id)arg5;
- (void)effectComponent:(id)arg1 effectId:(id)arg2 savePersistentStore:(id)arg3;
- (void)effectComponent:(id)arg1 effectId:(id)arg2 setScreenDimmingEnabled:(_Bool)arg3;
- (void)effectComponent:(id)arg1 effectId:(id)arg2 showHintWithId:(id)arg3;
- (void)effectComponent:(id)arg1 effectId:(id)arg2 showPopUpHintWithId:(id)arg3 interfaceElement:(unsigned long long)arg4;
- (void)effectComponent:(id)arg1 hideAllHintsForEffectWithId:(id)arg2;
- (void)effectComponent:(id)arg1 loadPersistentStoreForEffectWithId:(id)arg2;
- (void)effectComponent:(id)arg1 willTurnOnEffectWithId:(id)arg2;
- (id)excludedHintIds;
- (id)externalComponentForCurrentLens;
- (void)fadeInSponsoredSlug;
- (void)fadeOutSponsoredSlug;
@property(nonatomic) __weak id <UIGestureRecognizerDelegate> gestureRecognizerDelegate; // @synthesize gestureRecognizerDelegate=_gestureRecognizerDelegate;
@property(nonatomic) __weak UIView *hidableViewContainer; // @synthesize hidableViewContainer=_hidableViewContainer;
- (void)hideAllHintsForAppliedLensIfNeeded;
- (void)hideDemoLensWarning;
- (void)hideKeyboard;
- (void)hideLensesUI:(_Bool)arg1;
- (void)hideLensesUI:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)initLensesCollectionViewProperties:(id)arg1;
- (id)initWithParentViewContainer:(id)arg1 hidableViewContainer:(id)arg2 adInfoPresenter:(id)arg3 lensProcessingCore:(id)arg4 lensDataProvider:(id)arg5 lensLayoutProvider:(id)arg6 gestureRecognizerDelegate:(id)arg7 conversationMetadataProvider:(id)arg8 lensUserInterfaceDelegate:(id)arg9 lensUserProvider:(id)arg10 compassAndLocationProvider:(id)arg11 lensRemoteAssetsDataProvider:(id)arg12 lensBitmojiProvider:(id)arg13 uriServiceProvider:(id)arg14 snappablesFutureProvider:(id)arg15 textInputProvider:(id)arg16 sonicAssetHandler:(id)arg17 sharedStateControllerProvider:(id)arg18 lensUsageTracker:(id)arg19 lensUsageNotifier:(id)arg20 lensLogger:(id)arg21 lensUserDataProvider:(id)arg22 lensGeoDataProvider:(id)arg23 lensStudioSyncManager:(id)arg24 lensDownloadableContent:(id)arg25 lensDataFetcher:(id)arg26 userPreferences:(id)arg27 downloadableContentManager:(id)arg28;
- (id)initWithParentViewContainer:(id)arg1 hidableViewContainer:(id)arg2 adInfoPresenter:(id)arg3 userSession:(id)arg4 lensProcessingCore:(id)arg5 lensDataProvider:(id)arg6 lensLayoutProvider:(id)arg7 gestureRecognizerDelegate:(id)arg8 sceneIntelligence:(id)arg9 conversationMetadataProvider:(id)arg10 lensUserInterfaceDelegate:(id)arg11 lensUserProvider:(id)arg12;
- (_Bool)isAnyLensTouchProcessingGestureRecognizer:(id)arg1;
- (_Bool)isCurrentLensDownloadingInProgress;
- (_Bool)isLensLongPressGestureRecognizer:(id)arg1;
- (_Bool)isLensPanGestureRecognizer:(id)arg1;
- (_Bool)isLensPinchGestureRecognizer:(id)arg1;
- (_Bool)isLensRotationGestureRecognizer:(id)arg1;
- (_Bool)isLensTapGestureRecognizer:(id)arg1;
- (_Bool)isLensTouchProcessingGestureRecognizer:(id)arg1;
- (_Bool)isRegressorNeeded;
@property(copy, nonatomic) NSString *lensActivatorId; // @synthesize lensActivatorId=_lensActivatorId;
- (id)lensAssetsUploadOperationFuture;
@property(retain, nonatomic) SCLensBitmojiAlertUIController *lensBitmojiAlertUIController; // @synthesize lensBitmojiAlertUIController=_lensBitmojiAlertUIController;
- (void)lensBitmojiAlertUIControllerDidAppear:(id)arg1;
- (void)lensBitmojiAlertUIControllerDidDisappear:(id)arg1;
- (void)lensCarouselPresenter:(id)arg1 didEndDisplayingLens:(id)arg2;
- (void)lensCarouselPresenter:(id)arg1 didEndScrolling:(id)arg2 atLens:(id)arg3;
- (void)lensCarouselPresenter:(id)arg1 didScroll:(id)arg2 selectedCellDistance:(double)arg3;
- (void)lensCarouselPresenter:(id)arg1 didScroll:(id)arg2 selectedCellDistance:(double)arg3 selectedLens:(id)arg4;
- (void)lensCarouselPresenter:(id)arg1 didSelectLens:(id)arg2 index:(unsigned long long)arg3 originalLensIndex:(unsigned long long)arg4 totalLensesCount:(unsigned long long)arg5;
- (void)lensCarouselPresenter:(id)arg1 didUpdateLensesList:(id)arg2;
- (_Bool)lensCarouselPresenter:(id)arg1 isLensBeingApplied:(id)arg2;
- (void)lensCarouselPresenter:(id)arg1 willDisplayLens:(id)arg2;
- (void)lensContainerTapped;
@property(readonly, nonatomic) id <SCLensDataProviderProtocol> lensDataProvider; // @synthesize lensDataProvider=_lensDataProvider;
@property(readonly, nonatomic) unsigned long long lensEntryPoint;
@property(retain, nonatomic) UILabel *lensHintLabel; // @synthesize lensHintLabel=_lensHintLabel;
- (void)lensHintPresenterDidHideHint:(id)arg1;
- (_Bool)lensHintPresenterShouldShowHint:(id)arg1;
- (void)lensHintPresenterWillShowHint:(id)arg1;
- (id)lensIdForCrashLogger;
@property(retain, nonatomic) SCLoadingIndicatorView *lensLoadingIndicator; // @synthesize lensLoadingIndicator=_lensLoadingIndicator;
@property(retain, nonatomic) UIView *lensLoadingIndicatorBackground; // @synthesize lensLoadingIndicatorBackground=_lensLoadingIndicatorBackground;
@property(readonly, nonatomic) id <SCLensCompoundLogger> lensLogger; // @synthesize lensLogger=_lensLogger;
@property(readonly, nonatomic) _Bool lensTouchProcessingActive;
@property(nonatomic) __weak id <SCLensUserInterfaceDelegate> lensUserInterfaceDelegate; // @synthesize lensUserInterfaceDelegate=_lensUserInterfaceDelegate;
@property(readonly, nonatomic) UICollectionView *lensesCollectionView;
@property(readonly, nonatomic) SCLensCarouselPresenter *mainCarouselPresenter; // @synthesize mainCarouselPresenter=_mainCarouselPresenter;
@property(nonatomic) __weak UIView<SCLensGestureViewProvider> *parentView; // @synthesize parentView=_parentView;
- (_Bool)pointInsideAnyLensView:(struct CGPoint)arg1;
- (_Bool)pointInsideAnyLensViewButton:(struct CGPoint)arg1;
- (_Bool)pointInsideLensSubPicker:(struct CGPoint)arg1;
- (id)presetsComponentForCurrentLens;
- (void)reloadLensDataProviderWithLensIdToRestore:(id)arg1;
- (void)resetTextInput;
- (void)selectLensWithIdIfPossible:(id)arg1;
- (void)setLensesActive:(_Bool)arg1 appearanceConfiguration:(id)arg2 activationState:(id)arg3 completion:(CDUnknownBlockType)arg4;
@property(retain, nonatomic) UITapGestureRecognizer *sponsoredSlugTapGestureRecognizer; // @synthesize sponsoredSlugTapGestureRecognizer=_sponsoredSlugTapGestureRecognizer;
@property(retain, nonatomic) SCSponsoredSlugInteractiveView *sponsoredSlugView; // @synthesize sponsoredSlugView=_sponsoredSlugView;
@property(retain, nonatomic) SCLensesUIControllerState *state; // @synthesize state=_state;
@property(retain, nonatomic) UILabel *tapToDownloadLabel; // @synthesize tapToDownloadLabel=_tapToDownloadLabel;
@property(nonatomic) __weak id <SCFeatureToggleCameraButton> toggleCameraButton; // @synthesize toggleCameraButton=_toggleCameraButton;
- (void)setUIActivatedForLens:(id)arg1;
- (void)showAdInfoPage;
- (void)showDemoLensWarningForLens:(id)arg1;
- (void)showHintView:(_Bool)arg1 withHintView:(id)arg2 animated:(_Bool)arg3;
- (void)showLensesUI:(_Bool)arg1;
- (void)showLensesUI:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)showOrHideSponsoredSlugForLensIfNeeded:(id)arg1;
- (void)showTapToDownloadHint:(_Bool)arg1 animated:(_Bool)arg2;
- (id)snappablesDataFuture;
- (void)touchProcessingController:(id)arg1 didReceiveError:(id)arg2;
- (void)touchProcessingControllerDidFinishInteraction:(id)arg1;
- (void)touchProcessingControllerDidProcessTouches:(id)arg1;
- (void)trackingComponent:(id)arg1 didRecognizeExpression:(id)arg2;
- (void)trackingComponent:(id)arg1 didRecognizeFaces:(unsigned long long)arg2;
@property(readonly, nonatomic) SCLensUIUpdateListenerAnnouncer *uiUpdateAnnouncer; // @synthesize uiUpdateAnnouncer=_uiUpdateAnnouncer;
@property(readonly, nonatomic) SCPreferences *userPreferences; // @synthesize userPreferences=_userPreferences;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

