//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSCoding-Protocol.h"
#import "SCSpectaclesBleMonitorDelegate-Protocol.h"
#import "SCSpectaclesBluetoothMonitorDelegate-Protocol.h"
#import "SCSpectaclesPeripheralDelegate-Protocol.h"
#import "SCSpectaclesWifiMonitorDelegate-Protocol.h"

@class NSData, NSDate, NSMutableArray, NSMutableSet, NSNumber, NSString, NSUUID, SCSpectaclesAmbaWatchdog, SCSpectaclesAncsNotificationSettings, SCSpectaclesBleMonitor, SCSpectaclesBluetoothMonitor, SCSpectaclesCalibration, SCSpectaclesContentStore, SCSpectaclesDeviceEventListenerAnnouncer, SCSpectaclesFirmwareUpdater, SCSpectaclesRequestMessage, SCSpectaclesTask, SCSpectaclesTaskQueue, SCSpectaclesTransferProgressMonitor, SCSpectaclesWifiMonitor, SCWeakTimer;
@protocol SCPerforming, SCSpectaclesFirmwareVersion, SCSpectaclesHardwareVersion, SCSpectaclesLibraryLogger, SCSpectaclesNetworkClient, SCSpectaclesPeripheral, SCSpectaclesTweaksConfigProvider;

@interface SCSpectaclesDevice : NSObject <SCSpectaclesPeripheralDelegate, NSCoding, SCSpectaclesBleMonitorDelegate, SCSpectaclesBluetoothMonitorDelegate, SCSpectaclesWifiMonitorDelegate>
{
    _Bool _hasSpaceToRecord;
    _Bool _locationEnabled;
    _Bool _ancsNotificationsEnabled;
    _Bool _hasReconciledContentList;
    _Bool _detectedBluetoothOverloadError;
    _Bool _charging;
    _Bool _hasChargingInfo;
    _Bool _peerBondStatus;
    _Bool _shouldRequestCrashReports;
    _Bool _everConnectedToWifi;
    NSString *_serialNumber;
    NSString *_displayName;
    id <SCSpectaclesFirmwareVersion> _firmwareVersion;
    id <SCSpectaclesHardwareVersion> _hardwareVersion;
    NSNumber *_voltageLevel;
    NSNumber *_storageLevel;
    unsigned long long _storageLevelStatus;
    SCSpectaclesCalibration *_calibration;
    long long _deviceNumber;
    long long _color;
    long long _firstPairedTimestamp;
    long long _lastPairedStatusUpdatedTimestamp;
    long long _lastPairFromUnpairedStateTimestamp;
    long long _lastNameUpdatedTimestamp;
    long long _lastGPSAlmanacUpdatedTimestamp;
    long long _lastConnectedTimestamp;
    long long _nordicTemperature;
    long long _ambaTemperature;
    long long _wifiTemperature;
    NSDate *_lastTemperatureReportTime;
    NSDate *_lastUploadAnalyticsLogsTime;
    unsigned long long _lastConnectionFailureReason;
    long long _saveContentToLocation;
    SCSpectaclesAncsNotificationSettings *_ancsFriendNotificationSettings;
    NSNumber *_batteryLevel;
    NSNumber *_guppyBatteryLevel;
    unsigned long long _batteryLevelStatus;
    unsigned long long _temperatureStatus;
    id <SCPerforming> _performer;
    SCWeakTimer *_deviceUpdateTimer;
    SCWeakTimer *_connectionTimer;
    SCWeakTimer *_encryptionTimer;
    SCWeakTimer *_transitionTimer;
    SCSpectaclesBleMonitor *_bleMonitor;
    SCSpectaclesRequestMessage *_outstandingBluetoothRequest;
    SCSpectaclesBluetoothMonitor *_bluetoothMonitor;
    SCSpectaclesWifiMonitor *_wifiMonitor;
    NSString *_ssidPassword;
    NSString *_countryCode;
    SCSpectaclesTask *_wifiMediaListTask;
    long long _transferDisabledReason;
    SCSpectaclesTransferProgressMonitor *_progressMonitor;
    NSMutableArray *_responseMonitors;
    NSMutableSet *_addAncsRuleRequestMessages;
    SCSpectaclesContentStore *_contentStore;
    SCSpectaclesDeviceEventListenerAnnouncer *_deviceAnnouncer;
    id <SCSpectaclesPeripheral> _peripheral;
    SCSpectaclesTaskQueue *_taskQueue;
    NSString *_shortDisplayName;
    NSData *_encryptionKey;
    long long _state;
    long long _connectionReason;
    NSUUID *_identifier;
    id <SCSpectaclesTweaksConfigProvider> _tweaksConfigProvider;
    id <SCSpectaclesLibraryLogger> _analyticsLogger;
    long long _numberOfConnectionAttempts;
    long long _lastMediaCountSeenInResponse;
    long long _lastMediaCount;
    long long _coulombCounterTemperature;
    NSString *_wifiName;
    NSString *_wifiPassword;
    NSString *_deviceIpAddress;
    SCSpectaclesFirmwareUpdater *_firmwareUpdater;
    SCSpectaclesAmbaWatchdog *_ambaWatchdog;
    long long _capabilities;
    id <SCSpectaclesNetworkClient> _cachedBluetoothClient;
}

+ (long long)_capabilitiesWithFirmware:(id)arg1 hardware:(id)arg2;
+ (id)deviceColorToString:(long long)arg1;
+ (_Bool)isDeviceColorValid:(long long)arg1;
+ (id)mockDevice;
+ (_Bool)supportsPsychomantisWithFirmware:(id)arg1 hardware:(id)arg2;
- (void).cxx_destruct;
- (id)_addRefreshContentRequest;
- (void)_addResponseMonitorWithHandler:(CDUnknownBlockType)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3 timeoutBlock:(CDUnknownBlockType)arg4;
- (void)_addStereoCalibrationDataRequestIfNeeded;
- (void)_adoptBabyDevice:(id)arg1;
- (void)_applicationDidBecomeActiveNotification:(id)arg1;
- (void)_applicationWillTerminateNotification:(id)arg1;
- (unsigned int)_blueValueForHexString:(id)arg1;
- (void)_checkCapabilities;
- (unsigned int)_colorIntForHexString:(id)arg1;
- (void)_connectionDidTimeout;
- (_Bool)_crashDetectedInResponse:(id)arg1;
- (unsigned int)_greenValueForHexString:(id)arg1;
- (void)_handleAmbaCrashed;
- (unsigned long long)_handleDeviceStatus:(id)arg1;
- (_Bool)_handleMediaCount:(long long)arg1;
- (void)_handleResponse:(id)arg1;
- (id)_myUUID;
- (void)_passMonitorsResponse:(id)arg1;
- (void)_reconcileTweakStates;
- (unsigned int)_redValueForHexString:(id)arg1;
- (void)_requestAddAncsRule;
- (void)_sendDeviceInfoRequest;
- (void)_sendDeviceReset;
- (void)_sendDeviceUpdateRequest;
- (void)_sendStartBTRequest;
- (void)_sendStopBTRequest;
- (void)_startConnectionTimeout;
- (void)_startDeviceUpdates;
- (void)_startEncryptionSetupTimer;
- (void)_stopConnectionTimeout;
- (void)_stopDeviceUpdates;
- (void)_stopEncryptionSetupTimer;
- (_Bool)_transferDisabled;
- (void)_transitionToState:(long long)arg1;
- (void)_transitionToState:(long long)arg1 afterRequest:(id)arg2 afterTime:(double)arg3;
- (void)_transitionToState:(long long)arg1 afterTime:(double)arg2;
- (void)_transitionToStateTimeoutComplete:(id)arg1;
- (unsigned long long)_unpairReasonFromConnectionFailure;
- (void)activate;
- (void)addAncsFriendNotificationSettings:(id)arg1;
@property(retain, nonatomic) NSMutableSet *addAncsRuleRequestMessages; // @synthesize addAncsRuleRequestMessages=_addAncsRuleRequestMessages;
- (void)addDeviceIdleAnalyticsRequest:(CDUnknownBlockType)arg1;
- (void)addDeviceLogsRequest:(CDUnknownBlockType)arg1;
- (void)addRefreshContentRequestIfNecessary;
- (void)adoptBabyDevice:(id)arg1 performer:(id)arg2;
- (_Bool)allowsPassiveUpdates;
@property(nonatomic) long long ambaTemperature; // @synthesize ambaTemperature=_ambaTemperature;
@property(retain, nonatomic) SCSpectaclesAmbaWatchdog *ambaWatchdog; // @synthesize ambaWatchdog=_ambaWatchdog;
- (void)ambaWatchdogKick;
@property(nonatomic) __weak id <SCSpectaclesLibraryLogger> analyticsLogger; // @synthesize analyticsLogger=_analyticsLogger;
@property(readonly, nonatomic) SCSpectaclesAncsNotificationSettings *ancsFriendNotificationSettings; // @synthesize ancsFriendNotificationSettings=_ancsFriendNotificationSettings;
@property(nonatomic) _Bool ancsNotificationsEnabled; // @synthesize ancsNotificationsEnabled=_ancsNotificationsEnabled;
@property(retain, nonatomic) NSNumber *batteryLevel; // @synthesize batteryLevel=_batteryLevel;
@property(nonatomic) unsigned long long batteryLevelStatus; // @synthesize batteryLevelStatus=_batteryLevelStatus;
- (id)bleDisplayName;
@property(retain, nonatomic) SCSpectaclesBleMonitor *bleMonitor; // @synthesize bleMonitor=_bleMonitor;
- (void)bleMonitor:(id)arg1 didConnectPeripheral:(id)arg2;
- (void)bleMonitor:(id)arg1 didDisconnectPeripheral:(id)arg2 reason:(long long)arg3;
- (void)bleMonitor:(id)arg1 didFindPeripheral:(id)arg2;
- (void)bluetoothDetectedOverload;
- (void)bluetoothDidConnect:(id)arg1;
- (void)bluetoothDidDisconnect:(id)arg1;
- (id)bluetoothDisplayName;
@property(retain, nonatomic) SCSpectaclesBluetoothMonitor *bluetoothMonitor; // @synthesize bluetoothMonitor=_bluetoothMonitor;
- (void)bluetoothNeedsPicker;
@property(retain, nonatomic) id <SCSpectaclesNetworkClient> cachedBluetoothClient; // @synthesize cachedBluetoothClient=_cachedBluetoothClient;
@property(copy, nonatomic) SCSpectaclesCalibration *calibration; // @synthesize calibration=_calibration;
- (void)cancelShareWifiCredentials;
@property(readonly, nonatomic) long long capabilities; // @synthesize capabilities=_capabilities;
- (void)clearContentWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)clearCrashReport;
@property(nonatomic) long long color; // @synthesize color=_color;
- (_Bool)connectedOverBLE;
- (_Bool)connectedOverBLEOrWiFi;
- (_Bool)connectedOverBT;
- (_Bool)connectedOverBTOrWiFi;
- (_Bool)connectedOverWiFi;
@property(nonatomic) long long connectionReason; // @synthesize connectionReason=_connectionReason;
@property(retain, nonatomic) SCWeakTimer *connectionTimer; // @synthesize connectionTimer=_connectionTimer;
- (void)contentListReconciled;
@property(retain, nonatomic) SCSpectaclesContentStore *contentStore; // @synthesize contentStore=_contentStore;
@property(nonatomic) long long coulombCounterTemperature; // @synthesize coulombCounterTemperature=_coulombCounterTemperature;
@property(copy, nonatomic) NSString *countryCode; // @synthesize countryCode=_countryCode;
- (void)deactivate;
- (void)dealloc;
@property(readonly, copy) NSString *description;
@property(nonatomic) _Bool detectedBluetoothOverloadError; // @synthesize detectedBluetoothOverloadError=_detectedBluetoothOverloadError;
@property(retain, nonatomic) SCSpectaclesDeviceEventListenerAnnouncer *deviceAnnouncer; // @synthesize deviceAnnouncer=_deviceAnnouncer;
@property(copy, nonatomic) NSString *deviceIpAddress; // @synthesize deviceIpAddress=_deviceIpAddress;
@property(nonatomic) long long deviceNumber; // @synthesize deviceNumber=_deviceNumber;
@property(retain, nonatomic) SCWeakTimer *deviceUpdateTimer; // @synthesize deviceUpdateTimer=_deviceUpdateTimer;
@property(copy, nonatomic) NSString *displayName; // @synthesize displayName=_displayName;
- (id)displayNameWithoutEmoji;
- (id)emoji;
- (void)encodeWithCoder:(id)arg1;
@property(retain, nonatomic) NSData *encryptionKey; // @synthesize encryptionKey=_encryptionKey;
@property(retain, nonatomic) SCWeakTimer *encryptionTimer; // @synthesize encryptionTimer=_encryptionTimer;
@property(nonatomic) _Bool everConnectedToWifi; // @synthesize everConnectedToWifi=_everConnectedToWifi;
@property(retain, nonatomic) SCSpectaclesFirmwareUpdater *firmwareUpdater; // @synthesize firmwareUpdater=_firmwareUpdater;
- (void)firmwareUpdaterSendRequest:(id)arg1;
- (void)firmwareUploadTaskDidFail;
- (void)firmwareUploadTaskDidSucceed;
@property(retain, nonatomic) id <SCSpectaclesFirmwareVersion> firmwareVersion; // @synthesize firmwareVersion=_firmwareVersion;
@property(nonatomic) long long firstPairedTimestamp; // @synthesize firstPairedTimestamp=_firstPairedTimestamp;
@property(retain, nonatomic) NSNumber *guppyBatteryLevel; // @synthesize guppyBatteryLevel=_guppyBatteryLevel;
@property(retain, nonatomic) id <SCSpectaclesHardwareVersion> hardwareVersion; // @synthesize hardwareVersion=_hardwareVersion;
@property(nonatomic) _Bool hasChargingInfo; // @synthesize hasChargingInfo=_hasChargingInfo;
- (_Bool)hasHdContentToDownload;
@property(nonatomic) _Bool hasReconciledContentList; // @synthesize hasReconciledContentList=_hasReconciledContentList;
@property(nonatomic) _Bool hasSpaceToRecord; // @synthesize hasSpaceToRecord=_hasSpaceToRecord;
@property(readonly) unsigned long long hash;
@property(retain, nonatomic) NSUUID *identifier; // @synthesize identifier=_identifier;
- (id)init;
- (id)initWithBabyDevice:(id)arg1 performer:(id)arg2 tweaksConfigProvider:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithSerialNumber:(id)arg1 displayName:(id)arg2 color:(long long)arg3 firstPairedTimestamp:(long long)arg4 lastPairedStatusUpdatedTimestamp:(long long)arg5 lastNameUpdatedTimestamp:(long long)arg6 deviceNumber:(long long)arg7 firmwareVersion:(id)arg8 hardwareVersion:(id)arg9 tweaksConfigProvider:(id)arg10;
- (_Bool)isActive;
@property(nonatomic, getter=isCharging) _Bool charging; // @synthesize charging=_charging;
- (_Bool)isEqual:(id)arg1;
- (_Bool)isUnpaired;
- (void)keepBluetoothAliveForever;
@property(nonatomic) long long lastConnectedTimestamp; // @synthesize lastConnectedTimestamp=_lastConnectedTimestamp;
@property(nonatomic) unsigned long long lastConnectionFailureReason; // @synthesize lastConnectionFailureReason=_lastConnectionFailureReason;
@property(nonatomic) long long lastGPSAlmanacUpdatedTimestamp; // @synthesize lastGPSAlmanacUpdatedTimestamp=_lastGPSAlmanacUpdatedTimestamp;
@property(nonatomic) long long lastMediaCount; // @synthesize lastMediaCount=_lastMediaCount;
@property(nonatomic) long long lastMediaCountSeenInResponse; // @synthesize lastMediaCountSeenInResponse=_lastMediaCountSeenInResponse;
@property(nonatomic) long long lastNameUpdatedTimestamp; // @synthesize lastNameUpdatedTimestamp=_lastNameUpdatedTimestamp;
@property(readonly, nonatomic) long long lastPairFromUnpairedStateTimestamp; // @synthesize lastPairFromUnpairedStateTimestamp=_lastPairFromUnpairedStateTimestamp;
@property(nonatomic) long long lastPairedStatusUpdatedTimestamp; // @synthesize lastPairedStatusUpdatedTimestamp=_lastPairedStatusUpdatedTimestamp;
@property(retain, nonatomic) NSDate *lastTemperatureReportTime; // @synthesize lastTemperatureReportTime=_lastTemperatureReportTime;
@property(retain, nonatomic) NSDate *lastUploadAnalyticsLogsTime; // @synthesize lastUploadAnalyticsLogsTime=_lastUploadAnalyticsLogsTime;
- (void)leftBatteryStatusWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
@property(nonatomic) _Bool locationEnabled; // @synthesize locationEnabled=_locationEnabled;
- (void)manualUnpairWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
@property(nonatomic) long long nordicTemperature; // @synthesize nordicTemperature=_nordicTemperature;
@property(nonatomic) long long numberOfConnectionAttempts; // @synthesize numberOfConnectionAttempts=_numberOfConnectionAttempts;
@property(retain, nonatomic) SCSpectaclesRequestMessage *outstandingBluetoothRequest; // @synthesize outstandingBluetoothRequest=_outstandingBluetoothRequest;
@property(nonatomic) _Bool peerBondStatus; // @synthesize peerBondStatus=_peerBondStatus;
@property(retain, nonatomic) id <SCPerforming> performer; // @synthesize performer=_performer;
@property(retain, nonatomic) id <SCSpectaclesPeripheral> peripheral; // @synthesize peripheral=_peripheral;
- (void)peripheral:(id)arg1 didFailWithError:(id)arg2;
- (void)peripheral:(id)arg1 didReceiveEncryptionResponse:(id)arg2;
- (void)peripheral:(id)arg1 didReceiveResponse:(id)arg2;
- (void)peripheralDidOpenStream:(id)arg1;
- (void)peripheralRequiresEncryptionSetup:(id)arg1;
- (void)prepShippingStateWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
@property(retain, nonatomic) SCSpectaclesTransferProgressMonitor *progressMonitor; // @synthesize progressMonitor=_progressMonitor;
- (void)removeAllAncsNotificationRules;
- (void)removeCorruptContent:(id)arg1;
- (void)requestBluetoothConnection:(long long)arg1;
- (void)requestBluetoothDisconnection;
- (void)requestClientId;
- (void)requestCrashReport;
- (void)requestLastCloudUploadTime;
- (void)requestPeerBondStatus;
- (void)requestWiFiConnectionWithSsidPassword:(id)arg1 countryCode:(id)arg2 connectionReason:(long long)arg3;
- (void)requestWiFiDisconnection;
- (void)requestWifiAPList;
- (void)reset;
- (void)resetConnectionTimer;
@property(retain, nonatomic) NSMutableArray *responseMonitors; // @synthesize responseMonitors=_responseMonitors;
- (void)rightBatteryStatusWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
@property(nonatomic) long long saveContentToLocation; // @synthesize saveContentToLocation=_saveContentToLocation;
- (void)sendAuthzCode:(id)arg1 codeVerifier:(id)arg2 redirectUri:(id)arg3;
- (void)sendContextNotificationForSourceId:(id)arg1;
- (void)sendContextNotificationWithAnimation:(id)arg1;
@property(copy, nonatomic) NSString *serialNumber; // @synthesize serialNumber=_serialNumber;
- (void)setPeripheralDisplayName;
@property(copy, nonatomic) NSString *shortDisplayName; // @synthesize shortDisplayName=_shortDisplayName;
@property(nonatomic) _Bool shouldRequestCrashReports; // @synthesize shouldRequestCrashReports=_shouldRequestCrashReports;
@property(copy, nonatomic) NSString *ssidPassword; // @synthesize ssidPassword=_ssidPassword;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(retain, nonatomic) NSNumber *storageLevel; // @synthesize storageLevel=_storageLevel;
@property(nonatomic) unsigned long long storageLevelStatus; // @synthesize storageLevelStatus=_storageLevelStatus;
@property(retain, nonatomic) SCSpectaclesTaskQueue *taskQueue; // @synthesize taskQueue=_taskQueue;
@property(nonatomic) unsigned long long temperatureStatus; // @synthesize temperatureStatus=_temperatureStatus;
- (void)setTransferDisabled:(_Bool)arg1 forReason:(long long)arg2;
@property(nonatomic) long long transferDisabledReason; // @synthesize transferDisabledReason=_transferDisabledReason;
@property(retain, nonatomic) SCWeakTimer *transitionTimer; // @synthesize transitionTimer=_transitionTimer;
@property(retain, nonatomic) NSNumber *voltageLevel; // @synthesize voltageLevel=_voltageLevel;
- (void)setWifiAPList:(id)arg1 success:(CDUnknownBlockType)arg2 failure:(CDUnknownBlockType)arg3;
@property(retain, nonatomic) SCSpectaclesTask *wifiMediaListTask; // @synthesize wifiMediaListTask=_wifiMediaListTask;
@property(retain, nonatomic) SCSpectaclesWifiMonitor *wifiMonitor; // @synthesize wifiMonitor=_wifiMonitor;
@property(copy, nonatomic) NSString *wifiName; // @synthesize wifiName=_wifiName;
@property(copy, nonatomic) NSString *wifiPassword; // @synthesize wifiPassword=_wifiPassword;
@property(nonatomic) long long wifiTemperature; // @synthesize wifiTemperature=_wifiTemperature;
- (void)setupContentWithCache:(id)arg1;
- (void)setupWithCentralManager:(id)arg1 analyticsLogger:(id)arg2 progressMonitor:(id)arg3 performer:(id)arg4 tweaksConfigProvider:(id)arg5;
- (void)shareWifiCredentials;
- (unsigned long long)storagelevelStatus;
- (_Bool)supportsAnalyticsLogs;
- (_Bool)supportsAutomaticStartAsNeededDeletion;
- (_Bool)supportsBatchRequests;
- (_Bool)supportsBluetoothTransferWhileRecording;
- (_Bool)supportsContextNotification;
- (_Bool)supportsHevc;
- (_Bool)supportsHomeWiFi;
- (_Bool)supportsImuData;
- (_Bool)supportsManualUnpair;
- (_Bool)supportsProtectedWifi;
- (_Bool)supportsPsychomantis;
- (_Bool)supportsSuspendingWifiWhileRecording;
- (_Bool)supportsTaskBatching;
- (_Bool)supportsUploadLogFile;
- (void)switchToHomeWifi:(id)arg1 wifiPassword:(id)arg2;
- (_Bool)tryingToConnectBT;
- (_Bool)tryingToConnectBTDeviceRecording;
- (_Bool)tryingToConnectBTForContentTransfer;
- (_Bool)tryingToConnectWiFi;
@property(readonly, nonatomic) id <SCSpectaclesTweaksConfigProvider> tweaksConfigProvider; // @synthesize tweaksConfigProvider=_tweaksConfigProvider;
- (id)undownloadedHdContent;
- (void)unpairWithReason:(unsigned long long)arg1;
- (void)updateGPSAlmanac:(id)arg1;
- (_Bool)wifiBooted;
- (_Bool)wifiCanUse5GhzChannelInAllCountries;
- (void)wifiDidBoot;
- (void)wifiDidConnect:(id)arg1;
- (void)wifiDidDisconnect;
- (id)wifiDisplayName;
@property(readonly, copy, nonatomic) NSNumber *wifiFrequency;
- (_Bool)wifiHasDeviceReliableWiFiNotification;
- (void)wifiMonitorSendRequest:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

