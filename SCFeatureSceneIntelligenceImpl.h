//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "SCFeature.h"

#import "SCFeatureSceneIntelligence-Protocol.h"
#import "SCLSIContextHandlerDelegate-Protocol.h"
#import "SCLSIDebugInfoPresenterDelegate-Protocol.h"
#import "SCLSIUtilityLensStatePresenterDelegate-Protocol.h"
#import "SCManagedCapturerListener-Protocol.h"

@class NSArray, NSString, NSUUID, SCARBarItem, SCDisposableObserverLifecycle, SCFeatureSceneIntelligenceAnalyticsController, SCFeatureSceneIntelligencePrivacyPrompter, SCLSIDebugInfoController, SCLSILensMetadataStore, SCLSIUtilityLensesController, SCLazy, SCLensSceneIntelligenceController, SCPredefinedLensMetadataStore, SCVerticalSwipeHintView, UIGestureRecognizer, UIView;
@protocol SCCapturer, SCFeatureCameraUIArbitrator, SCFeatureSceneIntelligenceLensDelegate, SCLensDataFetcher;

@interface SCFeatureSceneIntelligenceImpl : SCFeature <SCLSIUtilityLensStatePresenterDelegate, SCLSIDebugInfoPresenterDelegate, SCManagedCapturerListener, SCLSIContextHandlerDelegate, SCFeatureSceneIntelligence>
{
    id <SCCapturer> _capturer;
    SCDisposableObserverLifecycle *_appLifecycle;
    SCLensSceneIntelligenceController *_sceneIntelligenceController;
    SCLSIUtilityLensesController *_utilityLensesController;
    SCPredefinedLensMetadataStore *_suggestionResultsStore;
    SCLSILensMetadataStore *_lensMetadataStore;
    SCLSIDebugInfoController *_debugInfoController;
    SCFeatureSceneIntelligencePrivacyPrompter *_privacyPrompter;
    SCFeatureSceneIntelligenceAnalyticsController *_analyticsController;
    NSArray *_contextHandlers;
    SCLazy *_lensLogger;
    id <SCLensDataFetcher> _lensDataFetcher;
    _Bool _isDisplayingScanningAnimation;
    UIView *_containerView;
    SCVerticalSwipeHintView *_hintView;
    _Bool _isActive;
    _Bool _isPreparing;
    UIGestureRecognizer *_gestureRecognizer;
    id <SCFeatureSceneIntelligenceLensDelegate> lensDelegate;
    NSUUID *_uuid;
    id <SCFeatureCameraUIArbitrator> _cameraTooltipArbitrator;
}

- (void).cxx_destruct;
- (void)_activateForAllRelevantContextWithARBar:(id)arg1 point:(struct CGPoint)arg2 gestureRecognizer:(id)arg3;
- (void)_activateOnlyForActiveUtilityContext:(id)arg1 point:(struct CGPoint)arg2 scanSource:(int)arg3;
- (void)_activateWithContexts:(id)arg1 point:(struct CGPoint)arg2 scanSource:(int)arg3;
- (void)_completeAfter:(double)arg1 startTime:(double)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_configureDataProvider;
- (void)_configureHintView;
- (void)_showResultsForContext:(struct NSString *)arg1;
- (void)_startScanningAnimationFromPoint:(struct CGPoint)arg1;
- (void)_triggerShazam;
- (void)activate;
- (_Bool)activateFromPoint:(struct CGPoint)arg1 gestureRecognizer:(id)arg2 arBar:(id)arg3;
- (void)addListener:(id)arg1;
- (void)analyzeSingleFrameWithContexts:(id)arg1 touchPoint:(struct CGPoint)arg2 scanSource:(int)arg3;
@property(readonly, nonatomic) SCARBarItem *arBarItem;
- (id)beginAnalysisWithContexts:(id)arg1 touchPoint:(struct CGPoint)arg2 scanSource:(int)arg3;
@property(nonatomic) __weak id <SCFeatureCameraUIArbitrator> cameraTooltipArbitrator; // @synthesize cameraTooltipArbitrator=_cameraTooltipArbitrator;
- (void)cancelPrepareForActivationFromARBar:(id)arg1;
- (void)configureWithView:(id)arg1;
- (void)deactivateFromARBar:(id)arg1;
- (void)endAnalysisWithToken:(id)arg1;
- (void)finishScanningAnimationWithSuccess:(_Bool)arg1;
- (void)handleGesture:(id)arg1;
- (void)hideOriginalUIForDisplayInARBar:(id)arg1;
- (id)initWithCapturer:(id)arg1 requestManager:(id)arg2 snapTokenManager:(id)arg3 lensDataFetcher:(id)arg4 experimentManager:(id)arg5 privacyPrompter:(id)arg6 lensLogger:(id)arg7;
- (_Bool)isEqual:(id)arg1;
- (_Bool)isPointInsideSceneIntelligenceUI:(struct CGPoint)arg1;
@property(nonatomic) __weak id <SCFeatureSceneIntelligenceLensDelegate> lensDelegate; // @synthesize lensDelegate;
- (void)managedCapturer:(id)arg1 didChangeCaptureDevicePosition:(id)arg2;
- (void)onUtilityLensChanged:(id)arg1;
- (void)prepareForActivationFromPoint:(struct CGPoint)arg1 gestureRecognizer:(id)arg2 arBar:(id)arg3;
- (void)removeListener:(id)arg1;
- (void)requstedToShowDebugInfoFromPresenter:(id)arg1;
- (void)resetCurrentUtilityLensResults;
- (void)restoreFromARBar:(id)arg1;
- (void)setCameraUIVisible:(_Bool)arg1 animated:(_Bool)arg2 arbitrator:(id)arg3;
- (id)shazamDataInterceptor;
- (void)utilityLensStatePresenter:(id)arg1 requestedToPreviewResultsForContext:(struct NSString *)arg2;
- (void)utilityLensStatePresenter:(id)arg1 requestedToShowResultsForContext:(struct NSString *)arg2;
- (void)utilityLensStatePresenter:(id)arg1 startScanningForContext:(struct NSString *)arg2;
- (void)utilityLensStatePresenter:(id)arg1 stopScanningForContext:(struct NSString *)arg2;
@property(readonly, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

