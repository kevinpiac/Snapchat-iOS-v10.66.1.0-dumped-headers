//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <UIKit/UIViewController.h>

#import "LSASnapRecordingComponentListener-Protocol.h"
#import "SCCameraOverlayDelegate-Protocol.h"
#import "SCCameraReplyDelegate-Protocol.h"
#import "SCCameraScreenLensDataProviderSource-Protocol.h"
#import "SCCameraViewControllerLensDelegate-Protocol.h"
#import "SCCameraViewControllerLoggingDelegate-Protocol.h"
#import "SCCameraViewControllerMemoryLensDelegate-Protocol.h"
#import "SCCameraViewControllerODGDelegate-Protocol.h"
#import "SCCameraViewControllerPreviewPresenterDelegate-Protocol.h"
#import "SCCameraViewControllerScanDebugDelegate-Protocol.h"
#import "SCCameraViewControllerScanningDelegate-Protocol.h"
#import "SCCancelledSnapSendFromCameraDelegate-Protocol.h"
#import "SCFeatureCaptionDelegate-Protocol.h"
#import "SCFeatureDoubleTapToToggleCameraDelegate-Protocol.h"
#import "SCFeatureImageCaptureDelegate-Protocol.h"
#import "SCFeatureLensSideButtonDelegate-Protocol.h"
#import "SCFeatureMultiSnapDelegate-Protocol.h"
#import "SCFeatureShazamDelegate-Protocol.h"
#import "SCFeatureTimerModeDelegate-Protocol.h"
#import "SCFeatureToggleCameraButtonDelegate-Protocol.h"
#import "SCFeatureToggleCameraDelegate-Protocol.h"
#import "SCFeatureVideoCaptureDelegate-Protocol.h"
#import "SCFeatureVolumeButtonCaptureDelegate-Protocol.h"
#import "SCFeatureZoomingDelegate-Protocol.h"
#import "SCLensEntryPointTrackableProtocol-Protocol.h"
#import "SCLensOperaControllerDelegate-Protocol.h"
#import "SCLensStateWorkflowDelegate-Protocol.h"
#import "SCLensUnlockDelegate-Protocol.h"
#import "SCManagedCapturerListener-Protocol.h"
#import "SCManagedLensProcessorStateListener-Protocol.h"
#import "SCOperaSilentlyPresentedProtocol-Protocol.h"
#import "SCPageNameLogging-Protocol.h"
#import "SCPreviewFeatureScanDelegate-Protocol.h"
#import "SCScanResultViewControllerDelegate-Protocol.h"
#import "SCShakeToReportDelegate-Protocol.h"
#import "SCTraceEnabled-Protocol.h"
#import "SendSnapNavigationControllerDelegate-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"
#import "UINavigationControllerDelegate-Protocol.h"

@class NSString, NSTimer, SCCameraViewControllerInternalState, SCCameraViewControllerStartupWorkflow, SCDeepLinkMiniProfileController, SCDisposableObserver, SCEffectViewportManager, SCFeatureProvider, SCIdleTimerManager, SCLensInitEvent, SCLensOperaController, SCLensesUIAppearanceConfiguration, SCLensesUIControllerState, SCManagedLensProcessorState;
@protocol LSASnapRecordingComponentListener, SCCameraResources, SCCameraViewControllerDelegate, SCCameraViewControllerLensDelegate, SCCameraViewControllerLensStateDelegate, SCCameraViewControllerLoggingDelegate, SCCameraViewControllerMemoryLensDelegate, SCCameraViewControllerODGDelegate, SCCameraViewControllerPreviewPresenterDelegate, SCCameraViewControllerScanDebugDelegate, SCCameraViewControllerScanningDelegate, SCFeatureARBarDelegate, SCFeatureLensCarouselActivatorDelegate, SCFeatureLensCloseButtonDelegate, SCFeatureLensFeedDelegate, SCFeatureLensSideButtonDelegate, SCFeatureSceneIntelligenceLensDelegate, SCFeatureWorldCaptionLensButtonDelegate, SCLensCameraScreenDataProviderProtocol, SCLensEntryPointTrackableProtocol, SCLensProcessingCore, SCPreviewPresenter, SCShakeToReportDelegate, SCSnapSendPreparer, SCStartChatDelegate, SendSnapNavigationControllerDelegate;

@interface SCCameraViewController : UIViewController <SCCameraViewControllerScanDebugDelegate, SCOperaSilentlyPresentedProtocol, SCCameraViewControllerLoggingDelegate, SCCameraViewControllerMemoryLensDelegate, SCCameraViewControllerODGDelegate, SCCameraViewControllerPreviewPresenterDelegate, SendSnapNavigationControllerDelegate, SCShakeToReportDelegate, SCLensOperaControllerDelegate, LSASnapRecordingComponentListener, SCManagedLensProcessorStateListener, SCLensUnlockDelegate, SCFeatureLensSideButtonDelegate, SCCameraScreenLensDataProviderSource, SCCameraViewControllerLensDelegate, SCLensStateWorkflowDelegate, SCLensEntryPointTrackableProtocol, SCScanResultViewControllerDelegate, SCCameraViewControllerScanningDelegate, SCPreviewFeatureScanDelegate, SCTraceEnabled, UINavigationControllerDelegate, SCFeatureVideoCaptureDelegate, SCManagedCapturerListener, SCFeatureImageCaptureDelegate, SCFeatureToggleCameraDelegate, SCFeatureToggleCameraButtonDelegate, SCFeatureDoubleTapToToggleCameraDelegate, SCFeatureShazamDelegate, SCFeatureZoomingDelegate, SCFeatureMultiSnapDelegate, SCFeatureCaptionDelegate, SCFeatureTimerModeDelegate, SCFeatureVolumeButtonCaptureDelegate, UIGestureRecognizerDelegate, SCCameraOverlayDelegate, SCCameraReplyDelegate, SCCancelledSnapSendFromCameraDelegate, SCPageNameLogging>
{
    _Bool _triedToCaptureImage;
    unsigned long long _positionStartRecording;
    SCIdleTimerManager *_idleTimerManager;
    NSString *_lastSuccessfulLensActivationActivatorId;
    unsigned long long _swipingState;
    _Bool _isBlockingUnifiedCameraSwipe;
    NSTimer *_resetIsBlockingUnifiedCameraSwipeTimer;
    SCDisposableObserver *_lensCarouselDisposableObserver;
    _Bool _requestedToTurnOnLenses;
    _Bool _pressingCameraButton;
    id <SCCameraViewControllerDelegate> _delegate;
    id <SCSnapSendPreparer> _snapSendPreparer;
    id <SCStartChatDelegate> _startChatDelegate;
    id <SendSnapNavigationControllerDelegate> _sendSnapNavigationControllerDelegate;
    SCCameraViewControllerStartupWorkflow *_startupWorkflow;
    SCCameraViewControllerInternalState *_state;
    struct SCFeatureProvider *_featureProvider;
    SCLensesUIControllerState *_pendingLensControllerState;
    SCLensesUIAppearanceConfiguration *_pendingLensControllerAppearanceConfiguration;
    id <SCLensCameraScreenDataProviderProtocol> _lensDataProvider;
    SCLensInitEvent *_lensInitEvent;
    SCManagedLensProcessorState *_managedLensProcessorState;
    SCLensOperaController *_lensOperaController;
    CDUnknownBlockType _deeplinkUnlockDeferredBlock;
    SCDeepLinkMiniProfileController *_deepLinkMiniProfileController;
    double _longPressStartTime;
}

+ (id)announcerIdentifier;
+ (id)cameraPageViewName;
- (void).cxx_destruct;
- (void)_activateEffectViewportManager;
- (void)_alertCameraRestrictionOn;
- (void)_alertNoCamera;
- (void)_alertWithTitle:(id)arg1 description:(id)arg2;
- (void)_blockCameraSwipeDismissalIfNecessary:(id)arg1;
- (void)_clearLensInitEvent;
- (id)_currentLens;
- (double)_disableCameraDelayWithLowPowerMode;
- (void)_dismissCameraCardViewControllerWithDismissType:(unsigned long long)arg1 viewController:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_displayOpenLensTooltip;
- (void)_endScanningWithSuccess:(_Bool)arg1;
- (long long)_geofilterCount;
- (long long)_geolensCount;
- (_Bool)_isAnyLensDetectionAllowed;
- (id)_lensAPIAdaptor;
- (id)_lensesForActivation;
- (void)_lockMemoriesScroll:(_Bool)arg1;
- (void)_logGeofilterAttachmentView:(id)arg1;
- (void)_logLensInitEvent;
- (void)_logNoCamera:(id)arg1 authorization:(long long)arg2;
- (void)_prepareAndCaptureImageWithSessionId:(id)arg1;
- (void)_prepareLensInitEventWithActivationFlow:(long long)arg1;
- (void)_prepareLensOperaController:(id)arg1;
- (void)_presentPreviewForImage;
- (void)_presentPreviewForRecordedVideo:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_presentPreviewForRecordedVideoFuture:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_presentScanResultView:(id)arg1;
- (void)_processLensesActivationForUIWithCategoryId:(id)arg1 activationType:(long long)arg2;
- (void)_processLensesActivationFromPoint:(struct CGPoint)arg1 lenses:(id)arg2 success:(CDUnknownBlockType)arg3 failure:(CDUnknownBlockType)arg4;
- (void)_processLongPressCancelled:(id)arg1;
- (void)_processLongPressDidEnd:(id)arg1;
- (void)_processStartRecordingWithLongPress:(id)arg1;
- (void)_recordCurrentZoomStateForReset;
- (void)_setCaptureSourceFromRecordingMethod:(unsigned long long)arg1;
- (void)_setLensesActive:(_Bool)arg1 appearanceConfiguration:(id)arg2 activationState:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_setScreenAutoLockDisabledIfNeeded:(_Bool)arg1;
- (void)_setupMultiSnapConfigurationWithVideo:(id)arg1;
- (long long)_snapSourceForPageSource;
- (void)_startHandlingVolumeButtonEventsIfNeeded;
- (void)_studioPreviewLensShouldActivate:(id)arg1;
- (void)_studioPreviewLensShouldReloadIfNeeded:(id)arg1;
- (void)_toggleLenses;
- (void)_transitionToRecordingStateWithAnimationDuration:(double)arg1;
- (void)_turnLensesOn:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)abortPressingVolumeButtonAndEndRecording;
- (void)abortSnapRecordingFromLensIfNeeded;
- (CDUnknownBlockType)activateLensBlockAfterUnlockWithActivationState:(id)arg1;
- (id)activeLensForState:(id)arg1;
- (void)appStartupDidComplete;
- (id)appliedSnappablesMetadata;
- (void)applyCurrentLensIconToCameraButton;
@property(readonly, nonatomic) id <SCFeatureARBarDelegate> arBarDelegate;
- (_Bool)areLensesActive;
- (_Bool)areLensesAllInterfaceElementsHidden;
- (_Bool)areLensesOnboardingTooltipsCompleted;
- (_Bool)blockTouchesForCurrentLens;
- (_Bool)blockTouchesForCurrentLensWithNormalizedTouchPoints:(id)arg1 touchTypeMask:(unsigned long long)arg2;
- (id)bundledLensProvider;
- (id)cameraLensesInteractor;
- (id)cameraNavigationItem;
- (id)cameraOverlay;
- (void)cameraOverlayView:(id)arg1 didUpdateCameraViewType:(long long)arg2;
- (void)cameraOverlayView:(id)arg1 setAllInterfaceElementsHidden:(_Bool)arg2 animated:(_Bool)arg3 duration:(double)arg4;
- (_Bool)cameraTimerNeedsExtraBottomOffset;
- (_Bool)canShowStatusBarOverlay;
- (void)cancelSnapCaptureSession;
- (id)captureSessionIDForLog;
- (void)captureSnapImage;
- (void)captureStillImage;
- (void)clearExpiredLensPersistentStoragesInBackground;
- (_Bool)compatibilityZoomingMode;
- (struct CGRect)convertCameraTimerRectToView:(id)arg1;
- (id)createCameraLensesInteractor;
- (id)createCameraLensesUIController;
- (id)createLensDataProviderWithUserSessionProvider:(id)arg1;
- (id)createLensStateWorkflow;
- (void)createYourOwnLensPressed;
- (id)currentLensDataProvider;
- (void)dealloc;
@property(retain, nonatomic) SCDeepLinkMiniProfileController *deepLinkMiniProfileController; // @synthesize deepLinkMiniProfileController=_deepLinkMiniProfileController;
@property(copy, nonatomic) CDUnknownBlockType deeplinkUnlockDeferredBlock; // @synthesize deeplinkUnlockDeferredBlock=_deeplinkUnlockDeferredBlock;
- (id)defaultEmptyLensControllerState;
- (id)defaultEmptyLensControllerStateBuilder;
- (CDUnknownBlockType)defaultErrorHandlerWithSelector:(SEL)arg1;
- (id)defaultProjectNameV2;
- (id)defaultSubProjectName;
@property(nonatomic) __weak id <SCCameraViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)didCancelFromPreview;
- (void)didCancelFromPreview:(id)arg1;
- (void)didComeFromCameraWithoutSendingSnap;
- (void)didComeFromCameraWithoutSendingSnapForCameraVC;
- (void)didEnterPreview;
- (void)didPostStories;
- (void)didPostStory;
- (void)didReceiveMemoryWarning;
- (void)didSaveSnapWithParameters:(id)arg1;
- (void)didSendChatMessage;
- (void)didSendDiscoverSharedMessageWithParameters:(id)arg1;
- (void)didSendSnaps;
- (void)didSendSnaps:(id)arg1 postToStory:(_Bool)arg2;
- (void)didSendToGallery;
- (void)didTapMicrophoneNotification;
- (void)didUpdateCarouselVisibility:(_Bool)arg1;
- (void)dismissLensOperaPresenterWithDidBackground:(_Bool)arg1;
- (void)dismissScanCards;
@property(readonly, nonatomic) SCEffectViewportManager *effectViewportManager;
- (_Bool)enableScanning;
- (void)exitLensFullScreenModeIfNeeded;
- (void)featureCaptionDidTap:(id)arg1;
- (void)featureDoubleTapToToggleCameraDidTriger:(id)arg1;
- (id)featureDoubleTapToToggleCameraGestureRecognizerDelegate;
- (void)featureImageCapture:(id)arg1 didCompleteRecoveryWithImage:(id)arg2 captureSessionId:(id)arg3 captureTimeStamp:(id)arg4;
- (void)featureImageCapture:(id)arg1 didCompleteWithError:(id)arg2;
- (void)featureImageCapture:(id)arg1 willCompleteWithStillImageData:(id)arg2 discardRelatedData:(id)arg3;
- (void)featureImageCaptureDidComplete:(id)arg1;
- (void)featureLensSideButton:(id)arg1 didPressLensButton:(id)arg2;
- (id)featureLensSideButtonBadgingUpdateProvider;
- (id)featureLensSideButtonUpdateProvider;
- (void)featureMultiSnap:(id)arg1 didRecoverWithMultiSnapConfiguration:(id)arg2 startRecordingTimestamp:(id)arg3;
- (void)featureMultiSnap:(id)arg1 willDisplayWithViewController:(id)arg2;
- (void)featureMultiSnap:(id)arg1 willResetWithViewController:(id)arg2;
@property(readonly, nonatomic) SCFeatureProvider<SCCameraResources> *featureProvider; // @synthesize featureProvider=_featureProvider;
- (void)featureScan:(id)arg1 didScanWithResult:(id)arg2;
- (void)featureScanning:(id)arg1 didFinishWithResult:(id)arg2;
- (void)featureShazam:(id)arg1 didFinishWithResult:(id)arg2;
- (void)featureShazamDidSubmitSearchRequest:(id)arg1;
- (void)featureTimerModeDidAbortCountingDown:(id)arg1;
- (void)featureTimerModeDidFinishCountingDown:(id)arg1;
- (void)featureTimerModeWillStartCountingDown:(id)arg1;
- (void)featureToggleCamera:(id)arg1 didToggleToDevicePosition:(unsigned long long)arg2;
- (void)featureToggleCamera:(id)arg1 willToggleToDevicePosition:(unsigned long long)arg2;
- (void)featureToggleCameraButtonDidTap:(id)arg1;
- (id)featureToggleCameraButtonTooltipContainerView;
- (id)featureToggleCameraButtonTooltipGestureDelegate;
- (_Bool)featureToggleCameraIsRecording:(id)arg1;
- (_Bool)featureToggleCameraIsTakingPicture:(id)arg1;
- (_Bool)featureVideoCaptureCameraFlipsWhileRecording:(id)arg1;
- (void)featureVideoCaptureDidAbortRecording:(id)arg1;
- (void)featureVideoCaptureDidCancelRecording:(id)arg1;
- (void)featureVideoCaptureDidCompleteRecovery:(id)arg1 captureSessionId:(id)arg2;
- (void)featureVideoCaptureDidDiscardRecordedVideo:(id)arg1;
- (void)featureVideoCaptureDidFailRecording:(id)arg1;
- (void)featureVideoCaptureDidFinishRecording:(id)arg1;
- (void)featureVideoCaptureDidReachEnd:(id)arg1;
- (void)featureVideoCaptureDidReachUnlimitedMovementThreshhold:(id)arg1;
- (void)featureVideoCaptureDidRemoveInvalidRecordedVideo:(id)arg1;
- (void)featureVideoCaptureDidStopRecording:(id)arg1;
- (_Bool)featureVideoCaptureHandsFreeEnabled:(id)arg1;
- (_Bool)featureVideoCaptureHasStartedRecording:(id)arg1;
- (void)featureVideoCaptureRecordingTooShort:(id)arg1;
- (_Bool)featureVideoCaptureShouldEndRecording:(id)arg1;
- (_Bool)featureVideoCaptureShouldPrepareRecording:(id)arg1;
- (_Bool)featureVideoCaptureShouldStartRecording:(id)arg1;
- (void)featureVideoCaptureWillFinishRecording:(id)arg1 videoSize:(struct CGSize)arg2 placeholderImage:(id)arg3;
- (void)featureVideoCaptureWillStartRecording:(id)arg1;
- (_Bool)featureZoomingIsInitiatedRecording:(id)arg1;
- (id)filterLensForFeatureShazam:(id)arg1;
- (void)finishSnapCaptureSession;
- (_Bool)finishingRecording;
- (void)forceReloadViewWillAndDidAppearIfNeeded;
@property(nonatomic) _Bool frontCameraActiveForLogging;
- (_Bool)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)getScanResultViewController;
- (void)handleDebugInfoForResponse:(id)arg1 image:(id)arg2;
- (void)handleLensActivation:(id)arg1;
- (void)handleMediaServicesLostNotification:(id)arg1;
- (void)handleMediaServicesResetNotification:(id)arg1;
- (void)handleNavigationAfterStoryPosted;
- (_Bool)handlePanFrom:(id)arg1;
- (_Bool)handlePinchFrom:(id)arg1;
- (void)handleScanResults:(id)arg1 scanSourceInformation:(id)arg2 sender:(id)arg3;
- (void)handleScanResults:(id)arg1 withSuccess:(_Bool)arg2 scanSourceInformation:(id)arg3 sender:(id)arg4;
- (void)handleSwipeFrom:(id)arg1;
- (void)handleTapFrom:(id)arg1;
- (_Bool)hasTakenPicture;
- (void)hideCameraTimer;
- (void)hideKeyboardIfNecessary;
- (void)hideLensUIControllerAnimated:(_Bool)arg1;
- (id)idleTimerManager;
- (_Bool)inCaptureCountingDown;
- (_Bool)inCaptureFlow;
- (id)initWithFeatureProvider:(struct SCFeatureProvider *)arg1;
- (id)initWithFeatureProvider:(struct SCFeatureProvider *)arg1 lensDataProvider:(id)arg2;
- (id)initWithFeatureProvider:(struct SCFeatureProvider *)arg1 lensDataProvider:(id)arg2 startupWorkflow:(id)arg3;
- (id)initWithFeatureProvider:(struct SCFeatureProvider *)arg1 startupWorkflow:(id)arg2 delegate:(id)arg3;
- (unsigned long long)initialCameraPosition;
- (_Bool)initiatedRecording;
- (_Bool)interactingWithCamera;
- (_Bool)isAnyLensActivationAllowed;
- (_Bool)isAnyLensTouchProcessingGestureRecognizer:(id)arg1;
- (_Bool)isBlockingUnifiedCameraSwipe;
- (_Bool)isCameraRunning;
- (_Bool)isCurrentLensFetched;
- (_Bool)isCurrentLensSnappable;
- (_Bool)isInReplyingMode;
- (_Bool)isLensActive;
- (_Bool)isLensDisplayable;
- (_Bool)isLensLongPressGestureRecognizer:(id)arg1;
- (_Bool)isLensPanGestureRecognizer:(id)arg1;
- (_Bool)isLensPinchGestureRecognizer:(id)arg1;
- (_Bool)isLensRotationGestureRecognizer:(id)arg1;
- (_Bool)isLensTapGestureRecognizer:(id)arg1;
- (_Bool)isLensTouchProcessingGestureRecognizer:(id)arg1;
- (_Bool)isPlayingSnappable;
- (_Bool)isPresentingPreviewViewController;
- (_Bool)isPresentingScanResultsViewController;
- (_Bool)isPressingCameraButtonOrVolumeButton;
- (_Bool)isSwiping;
- (id)jiraMetaInfo;
- (id)lazyLensesUIController;
- (id)lensActionHandler;
@property(readonly, nonatomic) id <SCFeatureLensCarouselActivatorDelegate> lensActivatorDelegate;
- (id)lensByIdRetrievable;
- (void)lensCallToActionButtonPressed:(id)arg1;
- (_Bool)lensCameraTooltipEnabled;
@property(readonly, nonatomic) id <SCFeatureLensCloseButtonDelegate> lensCloseButtonDelegate;
- (void)lensContainerTapped;
- (id)lensControllerState;
- (id)lensCoreAnalyticsLogger;
@property(retain, nonatomic) id <SCLensCameraScreenDataProviderProtocol> lensDataProvider; // @synthesize lensDataProvider=_lensDataProvider;
@property(readonly, nonatomic) id <SCCameraViewControllerLensDelegate> lensDelegate;
@property(readonly, nonatomic) id <SCLensEntryPointTrackableProtocol> lensEntryPointTrackable;
@property(readonly, nonatomic) id <SCFeatureLensFeedDelegate> lensFeedDelegate;
@property(retain, nonatomic) SCLensInitEvent *lensInitEvent; // @synthesize lensInitEvent=_lensInitEvent;
@property(retain, nonatomic) SCLensOperaController *lensOperaController; // @synthesize lensOperaController=_lensOperaController;
- (void)lensOperaController:(id)arg1 didClosePresenter:(id)arg2;
- (void)lensOperaController:(id)arg1 didClosePresenter:(id)arg2 lensUnlocked:(id)arg3;
- (void)lensOperaController:(id)arg1 didOpenPresenter:(id)arg2;
@property(readonly, nonatomic) id <SCLensProcessingCore> lensProcessingCore;
- (void)lensProcessorReadinessObserver:(id)arg1 didCompleteReadyPromiseForCapturer:(id)arg2;
@property(readonly, nonatomic) NSString *lensSessionId;
@property(readonly, nonatomic) id <SCFeatureLensSideButtonDelegate> lensSideButtonDelegate;
- (id)lensSideButtonUpdateProvider;
- (void)lensSponsoredSlugPressed:(id)arg1;
@property(readonly, nonatomic) id <SCCameraViewControllerLensStateDelegate> lensStateDelegate;
- (id)lensStateWorkflow;
- (id)lensStateWorkflowCameraLensesInteractor:(id)arg1;
- (id)lensStateWorkflowCameraViewControllerLensDelegate:(id)arg1;
- (id)lensStateWorkflowCurrentCameraViewControllerInternalState:(id)arg1;
- (id)lensStateWorkflowDefaultEmptyLensControllerStateBuilder:(id)arg1;
- (_Bool)lensStateWorkflowIsPresentingOperaController:(id)arg1;
- (_Bool)lensStateWorkflowIsPresentingPreviewViewController:(id)arg1;
- (_Bool)lensStateWorkflowIsPreviewViewControllerConfiguredWithLensPresented:(id)arg1;
- (id)lensStateWorkflowLensEntryPointTrackable:(id)arg1;
- (void)lensStateWorkflowPrepareToRestore:(id)arg1;
- (void)lensStateWorkflowStartHandlingVolumeButtonEventsIfNeeded:(id)arg1;
- (id)lensStateWorkflowUserSession:(id)arg1;
- (_Bool)lensTouchProcessingActive;
- (id)lensUserProvider;
- (void)lensWillUnlock;
- (id)lensesCollectionView;
- (_Bool)lensesDisallowSnapRecording;
- (id)lensesUIController;
- (void)loadView;
- (void)logCameraOpenCameraRunning:(id)arg1;
- (void)logCameraOpenStart:(id)arg1;
- (void)logCameraPageActionEventWithStartX:(double)arg1 startY:(double)arg2 endX:(double)arg3 endY:(double)arg4 duration:(double)arg5 module:(long long)arg6 firstUsage:(_Bool)arg7 action:(long long)arg8 lensActivator:(id)arg9 creativeKitMetadata:(id)arg10;
- (void)logCameraToggledWithAction:(long long)arg1 recording:(_Bool)arg2;
- (void)logCameraUserActionForCameraTimerWithGestureRecognizer:(id)arg1;
- (void)logHovaTabBarRecording;
- (void)logLivePreview;
- (void)logPageViewOnAppear:(id)arg1;
- (void)logPageViewOnDisappear:(id)arg1;
- (void)logPageViewOnExit:(long long)arg1;
- (void)logPageViewWhenViewDisappears;
- (void)logPresentPreview;
- (void)logRecordingStarted;
- (void)logRecordingStopped;
- (void)logSystemPermissionRequestForCamera:(_Bool)arg1;
- (void)logSystemPermissionRequestForMicrophone:(_Bool)arg1;
- (void)logTabBarRecording;
@property(readonly, nonatomic) id <SCCameraViewControllerLoggingDelegate> loggingDelegate;
- (_Bool)longPress:(id)arg1;
- (void)longPressDidEnd;
- (void)longPressOnCameraTimer:(id)arg1;
@property(nonatomic) double longPressStartTime; // @synthesize longPressStartTime=_longPressStartTime;
@property(readonly, nonatomic) id <LSASnapRecordingComponentListener> lsaSnapRecordingComponentListener;
- (id)mainSuperview;
- (void)managedCapturer:(id)arg1 didCapturePhoto:(id)arg2;
- (void)managedCapturer:(id)arg1 didChangeCaptureDevicePosition:(id)arg2;
- (void)managedCapturer:(id)arg1 didChangeLensesActive:(id)arg2;
- (void)managedCapturer:(id)arg1 didChangePortraitModeActive:(id)arg2;
- (void)managedCapturer:(id)arg1 didChangeState:(id)arg2;
- (void)managedCapturer:(id)arg1 willCapturePhoto:(id)arg2 sampleMetadata:(id)arg3;
- (void)managedLensProcessor:(id)arg1 didChangeState:(id)arg2;
@property(retain, nonatomic) SCManagedLensProcessorState *managedLensProcessorState; // @synthesize managedLensProcessorState=_managedLensProcessorState;
@property(readonly, nonatomic) id <SCCameraViewControllerMemoryLensDelegate> memoryLensDelegate;
- (id)navigationController:(id)arg1 animationControllerForOperation:(long long)arg2 fromViewController:(id)arg3 toViewController:(id)arg4;
- (void)notifyUserAfterStartCameraIfNecessary;
- (_Bool)notifyUserOfCameraAndMicrophoneUsageIfNecessary;
- (_Bool)notifyUserOfDeniedCameraIfNecessary;
- (void)notifyUserOfMicrophoneUsageIfNecessary;
- (void)notifyUserOfRestrictedCameraIfNecessary;
@property(readonly, nonatomic) id <SCCameraViewControllerODGDelegate> odgDelegate;
- (void)onDetectCameraViewVisible:(_Bool)arg1;
- (void)openLensCarouselSideButtonPressed:(id)arg1;
- (id)pageViewName;
- (void)pauseDataFetcherDownloads;
- (id)pendingDeeplinkBitmojiLensId;
@property(retain, nonatomic) SCLensesUIAppearanceConfiguration *pendingLensControllerAppearanceConfiguration; // @synthesize pendingLensControllerAppearanceConfiguration=_pendingLensControllerAppearanceConfiguration;
@property(retain, nonatomic) SCLensesUIControllerState *pendingLensControllerState; // @synthesize pendingLensControllerState=_pendingLensControllerState;
- (_Bool)pointInsideAnyLensView:(struct CGPoint)arg1;
- (_Bool)pointInsideAnyLensViewButton:(struct CGPoint)arg1;
- (_Bool)pointInsideLensInfoButton:(struct CGPoint)arg1;
- (_Bool)pointInsideLensLogoPicker:(struct CGPoint)arg1;
- (void)postponedViewDidBecomeActive;
- (unsigned long long)preferredScreenEdgesDeferringSystemGestures;
- (long long)preferredStatusBarStyle;
- (_Bool)prefersStatusBarHidden;
- (void)prepareForRecordingWithMethod:(unsigned long long)arg1;
- (_Bool)preparingPreview;
- (_Bool)preparingRecording;
- (void)presentCreateYourOwnFlowFromMainCarousel;
- (void)presentInformationIconCardView:(id)arg1;
- (void)presentOnDemandGeofilterViewControllers:(id)arg1;
- (void)presentPreviewForBatchCapture;
- (void)presentPreviewForImageFuture:(id)arg1 async:(_Bool)arg2;
- (void)presentPreviewForVideoFuture:(id)arg1;
- (void)presentScanResultViewControllerWithActionsInfo:(id)arg1 scanSourceInformation:(id)arg2;
@property(nonatomic) _Bool pressingCameraButton; // @synthesize pressingCameraButton=_pressingCameraButton;
@property(retain, nonatomic) id <SCPreviewPresenter> previewPresenter;
@property(readonly, nonatomic) id <SCCameraViewControllerPreviewPresenterDelegate> previewPresenterDelegate;
- (id)previewTransitionController;
- (void)processRecordingForLongPress:(id)arg1 shouldStartRecording:(_Bool)arg2;
- (void)processTimerModeForGesture:(id)arg1;
- (id)profileButtonView;
- (id)propertiesTuple;
- (_Bool)recording;
- (void)removeSnapRecordingComponentListener:(id)arg1;
- (void)replyBackButtonLeftPressed;
@property(nonatomic) _Bool requestedToTurnOnLenses; // @synthesize requestedToTurnOnLenses=_requestedToTurnOnLenses;
- (void)resetAll;
- (void)resetIsBlockingUnifiedCameraSwipe;
- (void)resetLensEntryPoint;
- (void)resetLensSubPickerActiveOptionIds;
- (void)resetPreviewPresenter;
- (void)resetTextInputIfNecessary;
- (void)restartTrackingWithNormalizedPoint:(struct CGPoint)arg1 completion:(CDUnknownBlockType)arg2;
- (void)resumeDataFetcherDownloads;
@property(readonly, nonatomic) id <SCCameraViewControllerScanDebugDelegate> scanDebugDelegate;
- (id)scanResultViewController:(id)arg1;
- (void)scanResultViewControllerDidDismiss:(id)arg1 dismissType:(unsigned long long)arg2;
@property(readonly, nonatomic) id <SCCameraViewControllerScanningDelegate> scanningDelegate;
@property(readonly, nonatomic) id <SCFeatureSceneIntelligenceLensDelegate> sceneIntelligenceLensDelegate;
- (void)scheduleLogForCameraOpenFirstFrameReceivedSuccessfully:(id)arg1;
- (void)selectLensWithIdIfPossible:(id)arg1;
@property(nonatomic) __weak id <SendSnapNavigationControllerDelegate> sendSnapNavigationControllerDelegate; // @synthesize sendSnapNavigationControllerDelegate=_sendSnapNavigationControllerDelegate;
- (void)setCameraOverlayFrameHeight:(double)arg1;
- (void)setCameraViewHidden:(_Bool)arg1;
- (void)setCameraViewType:(long long)arg1;
- (void)setDepthPhotoDataFuture:(id)arg1;
- (void)setDevicePosition:(unsigned long long)arg1;
- (void)setLensCarouselHidden:(_Bool)arg1;
- (void)setLensesCollectionViewScrollEnabled:(_Bool)arg1;
- (void)setMemoriesGalleryButtonHidden:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setNavigationItemsHidden:(_Bool)arg1 includingAlwaysShowItems:(_Bool)arg2 animated:(_Bool)arg3 duration:(double)arg4;
- (void)setNavigationItemsHidden:(_Bool)arg1 includingAlwaysShowItems:(_Bool)arg2 withOffset:(_Bool)arg3 animated:(_Bool)arg4 duration:(double)arg5;
- (_Bool)setNextImageFromMemoriesForLensWithId:(id)arg1;
- (void)setNoReply;
- (void)setRecordingState:(unsigned long long)arg1;
- (void)setReplyWithParameter:(id)arg1 cameraViewType:(long long)arg2;
- (void)setRightSwipeGestureRecognizerEnabled;
@property(nonatomic) __weak id <SCSnapSendPreparer> snapSendPreparer; // @synthesize snapSendPreparer=_snapSendPreparer;
@property(nonatomic) __weak id <SCStartChatDelegate> startChatDelegate; // @synthesize startChatDelegate=_startChatDelegate;
- (void)setSwipingState:(unsigned long long)arg1;
- (void)setUpLensProcessorDependants;
- (void)setUpLensesWithLensDataProvider:(id)arg1;
- (void)setVolumeButtonHandlingEnabled:(_Bool)arg1;
@property(readonly, nonatomic) id <SCShakeToReportDelegate> shakeToReportDelegate;
- (_Bool)shouldBeSilentlyPresentedAndPauseOpera;
- (_Bool)shouldDisableShakeToReportOnCurrentPage;
- (_Bool)shouldDisplayStatusBar;
- (_Bool)shouldPopToRootViewController;
- (_Bool)shouldRecognizeButtonActions;
- (void)showAdInfoForLens:(id)arg1;
- (void)showCallToActionViewForLens:(id)arg1;
- (void)showCameraTimer;
- (void)showLensUIControllerAnimated:(_Bool)arg1;
- (void)showProfileTooltipForOnDemandGeofilterInAppPurchaseFromViewController:(id)arg1;
- (void)showRecordedVideoIfNecessary;
- (void)showScanCardForThirdPartyLens:(id)arg1;
- (id)snappablesDataFuture;
- (void)startImageCaptureSessionWithSessionId:(id)arg1 lensIntiatedCapture:(_Bool)arg2;
- (void)startSnapRecording;
- (void)startVideoCaptureSessionForLensInitiatedCapture:(_Bool)arg1;
- (_Bool)startedRecording;
@property(readonly, nonatomic) SCCameraViewControllerStartupWorkflow *startupWorkflow; // @synthesize startupWorkflow=_startupWorkflow;
@property(readonly, nonatomic) SCCameraViewControllerInternalState *state; // @synthesize state=_state;
- (void)statusBarTapped;
- (void)stopCameraImmediately;
- (void)stopCameraSoftly;
- (void)stopCameraSoftlyAfter:(double)arg1 completionIfStopped:(CDUnknownBlockType)arg2;
- (void)stopDeviceMotionUpdates;
- (void)stopHandlingVolumeButtonEvents;
- (void)stopScanning;
- (void)stopSnapRecording;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)takingPicture;
- (void)thirdPartyLensInformationButtonPressed:(id)arg1;
- (id)toggleCameraButtonView;
- (_Bool)toggleCameraButtonsVisibility:(_Bool)arg1 animated:(_Bool)arg2;
- (void)toggleLensesButtonPressed;
- (void)tryCapturingStillImage;
- (void)tryToActivateLensAfterUnlockWithActivationState:(id)arg1;
- (void)tryToActivateLensFromPushNotification:(id)arg1;
- (_Bool)tryToActivateLensesWithActivationParameters:(id)arg1 activationState:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (_Bool)tryToActivateLensesWithActivationState:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)tryToActivateLensesWithLongPressGestureRecognizer:(id)arg1 originalPoint:(struct CGPoint)arg2 retryOnFailure:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;
- (_Bool)tryToActivateLensesWithTapGestureRecognizer:(id)arg1 originalPoint:(struct CGPoint)arg2 completion:(CDUnknownBlockType)arg3;
- (void)turnLensesOff;
- (void)turnLensesOffWithCompletion:(CDUnknownBlockType)arg1;
- (void)turnLensesOn;
- (id)turnLensesOnAndSelectFirstApplicableLens;
- (id)turnLensesOnAndSelectFirstApplicableLensWithActivationType:(unsigned long long)arg1;
- (void)turnLensesOnWithActivationParameters:(id)arg1 activationState:(id)arg2;
- (void)turnLensesOnWithActivationParameters:(id)arg1 activationState:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)turnLensesOnWithActivationState:(id)arg1;
- (_Bool)updateLensCarouselVisibilityForState:(id)arg1 showBirthdayReplyLens:(_Bool)arg2 animated:(_Bool)arg3;
- (void)updateLensDataProvider:(id)arg1;
- (void)updateLensDataProviderWithCameraType:(long long)arg1 ownerContextDescription:(id)arg2;
- (void)updateLensDataStore;
- (_Bool)useLightPreviewTransitionBehavior;
- (id)userSession;
- (void)vendPreviewPresenterToRelevantFeatures:(id)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidBecomeActive;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewDidEnterBackground;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewWillEnterForeground;
- (void)viewWillResignActive;
- (void)volumeButtonCaptureBegan;
- (void)volumeButtonCaptureEnded;
- (id)volumeButtonCaptureHandler:(id)arg1;
- (_Bool)volumeButtonCaptureShouldAllowBegin:(id)arg1;
- (_Bool)volumeButtonCaptureShouldAllowEnd:(id)arg1;
- (void)warmupLensesUIController;
- (void)warmupPreview;
- (void)willEndCensoringScreenshot;
- (void)willEnterPreview;
- (void)willExitFullscreen;
- (void)willStartCensoringScreenshot;
@property(readonly, nonatomic) id <SCFeatureWorldCaptionLensButtonDelegate> worldCaptionLensDelegate;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

