//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "SCCacheClearing-Protocol.h"
#import "SCSpectaclesDeviceStoreDelegate-Protocol.h"

@class NSNumber, NSString, SCSpectaclesCBCentralManager, SCSpectaclesCache, SCSpectaclesDeviceManager, SCSpectaclesDeviceNamer, SCSpectaclesDeviceStore, SCSpectaclesEventListenerAnnouncer, SCSpectaclesPairingManager, SCSpectaclesSensorStore;
@protocol SCSpectaclesCBCentralManagerEventListener, SCSpectaclesCrashLogger, SCSpectaclesLibraryLogger, SCSpectaclesTweaksConfigProvider;

@interface SCSpectaclesManager : NSObject <SCSpectaclesDeviceStoreDelegate, SCCacheClearing>
{
    NSNumber *_overrideBluetoothOn;
    SCSpectaclesDeviceManager *_deviceManager;
    SCSpectaclesEventListenerAnnouncer *_announcer;
    SCSpectaclesCache *_cache;
    SCSpectaclesPairingManager *_pairingManager;
    id <SCSpectaclesCrashLogger> _crashLogger;
    id <SCSpectaclesLibraryLogger> _analyticsLogger;
    id <SCSpectaclesCBCentralManagerEventListener> _centralManagerLogger;
    SCSpectaclesCBCentralManager *_centralManager;
    SCSpectaclesDeviceStore *_deviceStore;
    SCSpectaclesDeviceNamer *_namer;
    SCSpectaclesSensorStore *_sensorStore;
    id <SCSpectaclesTweaksConfigProvider> _tweaksConfigProvider;
}

+ (void)clearCacheExceptUserId:(id)arg1;
- (void).cxx_destruct;
- (void)_applyMockBatteryLevelStatusToDevice:(id)arg1 mockBatteryLevelStatusToDevice:(unsigned long long)arg2;
- (void)_applyMockStorageLevelStatusToDevice:(id)arg1 mockStorageLevelStatus:(unsigned long long)arg2;
- (void)_applyMockTemperatureStatusToDevice:(id)arg1 mockTemperatureStatusToDevice:(unsigned long long)arg2;
- (void)_applySetupBleNotificationsToDevice:(id)arg1 bleNotificationsEnabled:(_Bool)arg2;
- (void)activateDevice:(id)arg1;
- (void)addAncsFriendNotificationSettings:(id)arg1;
- (void)addDeviceIdleAnalyticsRequestForDevice:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)addListener:(id)arg1;
- (void)addRefreshContentTasks;
@property(retain, nonatomic) id <SCSpectaclesLibraryLogger> analyticsLogger; // @synthesize analyticsLogger=_analyticsLogger;
@property(retain, nonatomic) SCSpectaclesEventListenerAnnouncer *announcer; // @synthesize announcer=_announcer;
- (void)applyFirmwareUpdatePatch:(id)arg1 filepath:(id)arg2;
- (void)asyncUpdateBleNotifications:(_Bool)arg1;
- (long long)bluetoothState;
@property(retain, nonatomic) SCSpectaclesCache *cache; // @synthesize cache=_cache;
- (id)calibrationForSerialNumber:(id)arg1;
- (void)cancelFirmwareUpdate:(id)arg1;
- (void)cancelSearchForNewDevices;
- (void)cancelShareWifiCredentials:(id)arg1;
- (void)cancelWifiConnection;
@property(retain, nonatomic) SCSpectaclesCBCentralManager *centralManager; // @synthesize centralManager=_centralManager;
@property(retain, nonatomic) id <SCSpectaclesCBCentralManagerEventListener> centralManagerLogger; // @synthesize centralManagerLogger=_centralManagerLogger;
- (void)cleanUpCacheWithQueue:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)clearAllContentOnDevice:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
- (void)confirmKeepPreviousDevicePaired;
- (void)confirmUnpairPreviousDevice;
- (unsigned long long)connectedDeviceCount;
- (id)connectedDevices;
- (id)content;
- (void)crashDetected;
@property(retain, nonatomic) id <SCSpectaclesCrashLogger> crashLogger; // @synthesize crashLogger=_crashLogger;
- (id)currentTransferBatchID;
- (id)currentTransferSession;
- (void)deactivateDevice:(id)arg1;
- (void)dealloc;
- (void)deleteContentWithUUIDs:(id)arg1;
- (id)device0StateShortCode;
- (unsigned long long)deviceCount;
@property(retain, nonatomic) SCSpectaclesDeviceManager *deviceManager; // @synthesize deviceManager=_deviceManager;
- (id)deviceManagerStateShortCode;
- (id)deviceStateShortCode:(id)arg1;
@property(retain, nonatomic) SCSpectaclesDeviceStore *deviceStore; // @synthesize deviceStore=_deviceStore;
- (void)deviceStore:(id)arg1 didAddDevice:(id)arg2;
- (void)deviceStoreDidClearDevices;
- (id)devices;
- (id)firstConnectedDevice;
- (id)firstDevice;
- (id)firstPairedDevice;
- (void)forgetDevice:(id)arg1;
- (id)initWithLagunaProfile:(id)arg1 crashLogger:(id)arg2 analyticsLogger:(id)arg3 tweaksConfigProvider:(id)arg4;
- (_Bool)isContentBeingTranferred:(id)arg1 component:(unsigned long long)arg2;
- (_Bool)isContentPartOfCurrentTransferBatch:(id)arg1 component:(unsigned long long)arg2;
- (void)keepBluetoothAliveForeverForDevice:(id)arg1;
- (double)lastTransferSpeed;
- (void)leftBatteryStatus:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
- (void)manualUnpairDevice:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
- (void)mockFoundSpectaclesBackupPairing;
- (void)mockFoundSpectaclesRecording;
- (void)mockSpectaclesContentDownloading;
- (void)mockSpectaclesPairingComplete;
- (void)mockSpectaclesTransferInterrupted;
- (void)mockSpectaclesTransferSessionCompleteHdVideo;
- (void)mockSpectaclesTransferSessionCompletePhoto;
@property(retain, nonatomic) SCSpectaclesDeviceNamer *namer; // @synthesize namer=_namer;
@property(retain, nonatomic) NSNumber *overrideBluetoothOn; // @synthesize overrideBluetoothOn=_overrideBluetoothOn;
- (unsigned long long)pairedDeviceCount;
- (id)pairedDevices;
- (id)pairingDeviceEmoji;
- (id)pairingDeviceNameWithoutEmoji;
@property(retain, nonatomic) SCSpectaclesPairingManager *pairingManager; // @synthesize pairingManager=_pairingManager;
- (id)pairingStateShortCode;
- (void)prepShippingStateForDevice:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
- (void)reconcileDevicesFromServer:(id)arg1;
- (void)removeAllAncsNotificationRules;
- (void)removeListener:(id)arg1;
- (void)renameDevice:(id)arg1 newName:(id)arg2;
- (void)requestClientId:(id)arg1;
- (void)requestCurrentDeviceLogs:(CDUnknownBlockType)arg1;
- (void)requestFirmwareUpdate:(id)arg1 version:(id)arg2 digest:(id)arg3;
- (void)requestFirmwareUpdate:(id)arg1 version:(id)arg2 targetDigest:(id)arg3 windowStart:(id)arg4 windowLength:(double)arg5 userInfo:(id)arg6;
- (void)requestLastCloudUploadTime:(id)arg1;
- (void)requestPeerBondStatus;
- (void)requestWifiAPList:(id)arg1;
- (void)requirePeripheralNameForPairing:(id)arg1;
- (void)resetDevice:(id)arg1;
- (void)revertFirmwareBinary:(id)arg1;
- (void)rightBatteryStatus:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
- (void)sendAuthzCodeForDevice:(id)arg1 authzCode:(id)arg2 codeVerifier:(id)arg3 redirectUri:(id)arg4;
- (void)sendContextNotificationForSourceId:(id)arg1;
- (void)sendContextNotificationWithAnimation:(id)arg1;
@property(retain, nonatomic) SCSpectaclesSensorStore *sensorStore; // @synthesize sensorStore=_sensorStore;
- (void)setAncsNotificationsEnabled:(_Bool)arg1;
- (void)setCountryCode:(id)arg1;
- (void)setLocationEnabled:(_Bool)arg1 forDevice:(id)arg2;
- (void)setMinimumRequiredFirmwareVersion:(id)arg1 forHardwareWithMajorNumber:(unsigned long long)arg2;
- (void)setPairingDeviceLocationEnabled:(_Bool)arg1;
- (void)setPairingDeviceName:(id)arg1;
- (void)setTransferDisabled:(_Bool)arg1 forDevice:(id)arg2;
- (void)setTransferPriorityContext:(unsigned long long)arg1 contentUUIDs:(id)arg2;
- (void)setWifiAPList:(id)arg1 forDevice:(id)arg2 successBlock:(CDUnknownBlockType)arg3 failureBlock:(CDUnknownBlockType)arg4;
- (void)shareWifiCredentials:(id)arg1;
- (void)startConnectingWifiForHDFlow:(id)arg1 ssidPassword:(id)arg2 hdContentUUIDs:(id)arg3;
- (void)startFactoryFallbackSearchWithUserDisplayName:(id)arg1 shouldRestrictRSSIForFactory:(_Bool)arg2;
- (void)startFirmwareUpdate:(id)arg1 updateIsActive:(_Bool)arg2;
- (void)startSearchForNewDevicesWithUserDisplayName:(id)arg1;
- (void)totalSizeOfCacheFilesWithQueue:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (id)transferringContentForContentComponent:(unsigned long long)arg1;
@property(readonly, nonatomic) id <SCSpectaclesTweaksConfigProvider> tweaksConfigProvider; // @synthesize tweaksConfigProvider=_tweaksConfigProvider;
- (void)unpairDevicesWithError;
- (id)unsyncedContentUUIDs;
- (id)untransferredContentForContentComponent:(unsigned long long)arg1 device:(id)arg2;
- (void)updateMockBatteryLevelStatus:(unsigned long long)arg1;
- (void)updateMockStorageLevelStatus:(unsigned long long)arg1;
- (void)updateMockTemperatureStatus:(unsigned long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

