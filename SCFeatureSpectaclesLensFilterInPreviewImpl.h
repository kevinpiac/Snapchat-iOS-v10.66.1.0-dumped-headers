//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "SCFeature.h"

#import "SCFeatureSpectaclesLensFilterInPreview-Protocol.h"
#import "SCLensDataProviderListener-Protocol.h"
#import "SCSpectaclesAuxiliaryContentStoreListener-Protocol.h"

@class NSArray, NSMutableSet, NSString, SCDisposableObserverLifecycle, SCFeatureReference, SCLens, SCLensInPreviewUsageNotifier, SCLensInfoController, SCLensInfoViewModel, SCLensUIUpdateListenerAnnouncer, SCObservable, SCPreferences, SCPreviewConfiguration, SCSmartCarouselFilterArranger, SCSnapCommonLoggingParameters, SCSpectaclesAuxiliaryContentStore;
@protocol SCFeatureSpectaclesLensFilterInPreviewDelegate, SCLensCameraScreenDataProviderProtocol, SCLensLogger, SCLensUIUpdateListener, SCPreviewLensDataProviderFactoryProtocol;

@interface SCFeatureSpectaclesLensFilterInPreviewImpl : SCFeature <SCLensDataProviderListener, SCSpectaclesAuxiliaryContentStoreListener, SCFeatureSpectaclesLensFilterInPreview>
{
    id <SCPreviewLensDataProviderFactoryProtocol> _lensDataProviderFactory;
    id <SCLensUIUpdateListener> _lensDataFetcher;
    SCSpectaclesAuxiliaryContentStore *_auxiliaryContentStore;
    SCFeatureReference *_swipeFilters;
    SCSmartCarouselFilterArranger *_filterArranger;
    id <SCLensLogger> _lensLogger;
    SCSnapCommonLoggingParameters *_commonLoggingParameters;
    SCObservable *_applicationLifecycleEvents;
    SCDisposableObserverLifecycle *_disposableObserverLifecycle;
    SCLensUIUpdateListenerAnnouncer *_uiUpdateAnnouncer;
    SCPreferences *_userPreferences;
    SCPreferences *_lensPreferences;
    SCLensInfoController *_lensInfoController;
    SCLensInfoViewModel *_lensInfoViewModel;
    NSMutableSet *_downloadedLensIds;
    _Bool _isTransitioningBetweenFilters;
    _Bool _didHandleNewLenses;
    _Bool _isImuAvailable;
    id <SCFeatureSpectaclesLensFilterInPreviewDelegate> _delegate;
    SCLens *_appliedLens;
    SCPreviewConfiguration *_configuration;
    id <SCLensCameraScreenDataProviderProtocol> _lensDataProvider;
    SCLensInPreviewUsageNotifier *_lensUsageNotifier;
    NSArray *_lenses;
    NSString *_lensDataProviderToken;
}

- (void).cxx_destruct;
- (void)_checkIfValidImuAvailable:(CDUnknownBlockType)arg1;
- (id)_currentFilterView;
- (void)_didEnterBackground;
- (unsigned long long)_indexOfLensFromFetchedLenses:(id)arg1;
- (_Bool)_isDepthAvailable;
- (_Bool)_isDepthRequired;
- (_Bool)_isLensReadyForFilterView:(id)arg1;
- (_Bool)_isSnapEligibleForLenses;
- (void)_loadLensDataIfAllLenesFetched;
- (void)_tryCreateLensFilterWithLens:(id)arg1;
- (void)_updateLens:(id)arg1;
- (void)_willEnterForeground;
- (void)activate;
@property(readonly, nonatomic) SCLens *appliedLens; // @synthesize appliedLens=_appliedLens;
- (void)applyLensIfNeeded;
@property(nonatomic) __weak SCPreviewConfiguration *configuration; // @synthesize configuration=_configuration;
- (void)configureWithView:(id)arg1;
@property(nonatomic) __weak id <SCFeatureSpectaclesLensFilterInPreviewDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) _Bool didHandleNewLenses; // @synthesize didHandleNewLenses=_didHandleNewLenses;
- (void)imageProcessLensCommand:(id)arg1 didFinishProcessingFrameWithLens:(id)arg2;
- (void)imageProcessLensCommand:(id)arg1 didRecognizeExpression:(id)arg2;
- (void)imageProcessLensCommand:(id)arg1 didRecognizeFaces:(unsigned long long)arg2;
- (void)imageProcessLensCommand:(id)arg1 didUnloadWithLensComponentManager:(id)arg2;
- (void)imageProcessLensCommand:(id)arg1 willLoadWithLensComponentManager:(id)arg2;
- (id)initWithPreviewConfiguration:(id)arg1 lensUsageNotifier:(id)arg2 lensDataProviderFactory:(id)arg3 lensDataFetcher:(id)arg4 auxiliaryContentStore:(id)arg5 swipeFilters:(id)arg6 filterArranger:(id)arg7 lensLogger:(id)arg8 commonLoggingParamters:(id)arg9 applicationLifecycleEvents:(id)arg10 userPreferences:(id)arg11 lensPreferences:(id)arg12;
@property(nonatomic) _Bool isImuAvailable; // @synthesize isImuAvailable=_isImuAvailable;
@property(nonatomic) _Bool isTransitioningBetweenFilters; // @synthesize isTransitioningBetweenFilters=_isTransitioningBetweenFilters;
@property(retain, nonatomic) id <SCLensCameraScreenDataProviderProtocol> lensDataProvider; // @synthesize lensDataProvider=_lensDataProvider;
- (void)lensDataProvider:(id)arg1 didUpdateAllLenses:(id)arg2 requiresAnimation:(_Bool)arg3;
- (void)lensDataProvider:(id)arg1 didUpdateLens:(id)arg2 contentUpdateType:(long long)arg3;
@property(retain, nonatomic) NSString *lensDataProviderToken; // @synthesize lensDataProviderToken=_lensDataProviderToken;
@property(retain, nonatomic) SCLensInPreviewUsageNotifier *lensUsageNotifier; // @synthesize lensUsageNotifier=_lensUsageNotifier;
@property(retain, nonatomic) NSArray *lenses; // @synthesize lenses=_lenses;
- (void)setupDebugLensInfoController:(id)arg1 lensComponentManager:(id)arg2;
- (void)spectaclesAuxiliaryContentStore:(id)arg1 didPrepareDepthForMediaIdentifier:(id)arg2;
- (void)teardownDebugLensInfoController:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

