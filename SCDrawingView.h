//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <UIKit/UIView.h>

#import "SCDrawingViewCommon-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"

@class NSMutableArray, NSString, SCBrushSizeAffordance, SCDrawingCache, SCDrawingGestureRecognizer, SCDrawingStroke, SCMultiSnapDrawingCache, SCQueuePerformer, SCSingleStrokeDrawingView, SCStrokeDrawerPoint, UIColor, UIImageView, UIPinchGestureRecognizer;
@protocol SCDrawingViewCommonDelegate, SCDrawingViewMultiSnapDelegate;

@interface SCDrawingView : UIView <UIGestureRecognizerDelegate, SCDrawingViewCommon>
{
    UIImageView *_historyImageView;
    SCSingleStrokeDrawingView *_singleStrokeDrawingView;
    NSMutableArray *_history;
    SCBrushSizeAffordance *_brushSizeAffordance;
    SCDrawingGestureRecognizer *_drawingGestureRecognizer;
    UIPinchGestureRecognizer *_pinchRecognizer;
    _Bool _brushIsScaled;
    double _lastScale;
    double _scale;
    UIColor *_color;
    NSString *_emoji;
    SCStrokeDrawerPoint *_previousPoint;
    long long _nextStrokeUniqueId;
    _Bool _strokeInProgress;
    SCDrawingStroke *_cachedStrokeInProgress;
    long long _initialUpdateVersion;
    _Bool _originalStateCanBeReached;
    SCDrawingCache *_cachedDrawings;
    SCQueuePerformer *_drawingCachePerformer;
    id <SCDrawingViewCommonDelegate> _delegate;
    long long _updateVersion;
    id <SCDrawingViewMultiSnapDelegate> _multiSnapDelegate;
    double _defaultStrokeWidth;
    SCMultiSnapDrawingCache *_multiSnapDrawingCache;
    long long _smoothingAlgorithmVersion;
}

+ (double)calculateEmojiRectDrawRatio:(double)arg1;
- (void).cxx_destruct;
- (void)_drawingPress:(id)arg1;
- (void)_handlePoint:(struct CGPoint)arg1 gestureState:(long long)arg2;
- (_Bool)_hasMultiSnapDrawingCache;
- (void)_restoreFromHistoryIndex:(long long)arg1 buildCache:(_Bool)arg2;
- (void)_scalePinch:(id)arg1;
- (void)_setStrokeOnSingleStrokeDrawingView:(id)arg1;
- (void)addPoint:(id)arg1;
- (id)currentStrokeColor;
- (double)currentStrokeLineWidth;
@property(nonatomic) double defaultStrokeWidth; // @synthesize defaultStrokeWidth=_defaultStrokeWidth;
@property(nonatomic) __weak id <SCDrawingViewCommonDelegate> delegate; // @synthesize delegate=_delegate;
- (id)drawCurrentStrokeOntoImage:(id)arg1;
- (void)drawScreenshotImageInCurrentContextWithRect:(struct CGRect)arg1;
- (id)drawingMetadata;
- (void)finishStroke;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)historyIds;
- (id)imageFromDrawingView;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1 useMultiCache:(_Bool)arg2;
@property(nonatomic) __weak id <SCDrawingViewMultiSnapDelegate> multiSnapDelegate; // @synthesize multiSnapDelegate=_multiSnapDelegate;
@property(readonly, nonatomic) SCMultiSnapDrawingCache *multiSnapDrawingCache; // @synthesize multiSnapDrawingCache=_multiSnapDrawingCache;
- (long long)pointCount;
- (void)replaceDrawingStrokeHistory:(id)arg1 forSegmentIndex:(long long)arg2;
- (void)saveCurrentStrokeToHistoryIfNeeded;
- (void)setBrushAffordanceColor:(id)arg1 OrEmoji:(id)arg2;
- (void)setBrushAffordanceSize:(double)arg1 withCenter:(struct CGPoint)arg2;
- (void)setBrushAffordanceVisibility:(_Bool)arg1;
@property(nonatomic) long long smoothingAlgorithmVersion; // @synthesize smoothingAlgorithmVersion=_smoothingAlgorithmVersion;
- (void)startNewStrokeWithColor:(id)arg1 lineWidth:(double)arg2;
- (void)startNewStrokeWithEmoji:(id)arg1 lineWidth:(double)arg2;
- (long long)strokeCount;
- (void)toggleBrushAffordanceShown:(_Bool)arg1;
- (void)undoStroke;
- (void)updateColor:(id)arg1;
- (void)updateEmoji:(id)arg1;
@property(readonly, nonatomic) long long updateVersion; // @synthesize updateVersion=_updateVersion;
- (void)updateWithDrawingMetadata:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

