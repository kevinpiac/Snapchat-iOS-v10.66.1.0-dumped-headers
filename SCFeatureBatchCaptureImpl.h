//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "SCFeature.h"

#import "SCBatchCaptureConfigurationListener-Protocol.h"
#import "SCCameraFeatureRecoverable-Protocol.h"
#import "SCCameraGestureResponder-Protocol.h"
#import "SCCameraToolbarItemProvider-Protocol.h"
#import "SCFeatureBatchCapture-Protocol.h"
#import "SCManagedCapturerListener-Protocol.h"

@class NSDate, NSString, SCBatchCaptureConfiguration, SCCameraOverlayView, SCCameraToolbarItem, SCCapturedBatchCaptureRecoveryData, SCCoreCameraLogger, SCDisposableObserverLifecycle, SCFeatureReference, SCLazy, SCManagedCapturerState, SCUserSession, UIView;
@protocol SCBatchCaptureUserPreferenceTimeProvider, SCCapturer, SCFeatureBatchCaptureDelegate, SCFeatureCameraToolbar, SCFeatureCameraUIArbitrator, SCFeatureContainerView, SCFeatureMultiSnap;

@interface SCFeatureBatchCaptureImpl : SCFeature <SCManagedCapturerListener, SCBatchCaptureConfigurationListener, SCCameraFeatureRecoverable, SCFeatureBatchCapture, SCCameraToolbarItemProvider, SCCameraGestureResponder>
{
    id <SCFeatureCameraToolbar> _cameraToolbar;
    id <SCFeatureMultiSnap> _multiSnap;
    SCCameraOverlayView *_parentView;
    SCUserSession *_userSession;
    SCFeatureReference *_cameraUserActionLogger;
    SCCameraToolbarItem *_toolbarItem;
    SCLazy *_overlayViewController;
    SCLazy *_buttonIconView;
    id <SCBatchCaptureUserPreferenceTimeProvider> _userPreferenceTimeProvider;
    unsigned long long _batchCaptureButtonTapCount;
    id <SCFeatureBatchCaptureDelegate> _delegate;
    id <SCFeatureCameraUIArbitrator> _cameraBottomUIArbitrator;
    UIView<SCFeatureContainerView> *_containerView;
    SCDisposableObserverLifecycle *_appLifecycle;
    SCBatchCaptureConfiguration *_batchCaptureConfiguration;
    SCCapturedBatchCaptureRecoveryData *_batchCaptureRecoveryData;
    long long _cameraViewType;
    id <SCCapturer> _capturer;
    NSDate *_creationTime;
    SCCoreCameraLogger *_coreCameraLogger;
    SCManagedCapturerState *_managedCapturerState;
}

- (void).cxx_destruct;
- (id)_activeVideoPaths;
- (void)_appWillEnterForeground;
- (id)_createButtonIconView;
- (id)_createToolbarItem;
- (id)_getCurrentLocation;
- (id)_lastSegmentThumbnail;
- (void)_loadBatchCaptureRecoveryDataAndShowPreview:(id)arg1;
- (void)_persistImage:(id)arg1 timestamp:(double)arg2 captureSessionID:(id)arg3;
- (void)_persistRecordedVideo:(id)arg1 timestamp:(double)arg2 captureSessionID:(id)arg3;
- (void)_removeActiveVideoPathsForSegment:(id)arg1;
- (void)_resetUI;
- (unsigned long long)_segmentCount;
- (void)_setBatchCaptureActivated:(_Bool)arg1;
- (void)_setBatchCaptureUIVisible:(_Bool)arg1;
- (void)_showLimitReachedAlertIfNeeded;
- (unsigned long long)_unsavedSegmentCount;
- (void)_updateLastSegmentThumbnailAndTotalCountAnimated:(_Bool)arg1;
@property(retain, nonatomic) SCDisposableObserverLifecycle *appLifecycle; // @synthesize appLifecycle=_appLifecycle;
@property(retain, nonatomic) SCBatchCaptureConfiguration *batchCaptureConfiguration; // @synthesize batchCaptureConfiguration=_batchCaptureConfiguration;
- (void)batchCaptureConfiguration:(id)arg1 didAddSegment:(id)arg2;
- (void)batchCaptureConfiguration:(id)arg1 didDeleteSegment:(id)arg2 atIndex:(long long)arg3;
- (void)batchCaptureConfiguration:(id)arg1 didDeleteSnapAtIndexPath:(id)arg2;
- (void)batchCaptureConfiguration:(id)arg1 didSplitSnapAtIndexPath:(id)arg2 splitTime:(CDStruct_1b6d18a9)arg3;
- (void)batchCaptureConfigurationDidDeleteAllSegments:(id)arg1;
- (void)batchCaptureConfigurationWillDeleteAllSegments:(id)arg1;
- (void)batchCaptureOverlayViewController:(id)arg1 previewButtonDidBecomeVisible:(_Bool)arg2;
- (void)batchCaptureOverlayViewControllerDidPressReviewAndEdit:(id)arg1;
@property(retain, nonatomic) SCCapturedBatchCaptureRecoveryData *batchCaptureRecoveryData; // @synthesize batchCaptureRecoveryData=_batchCaptureRecoveryData;
@property(nonatomic) __weak id <SCFeatureCameraUIArbitrator> cameraBottomUIArbitrator; // @synthesize cameraBottomUIArbitrator=_cameraBottomUIArbitrator;
@property(nonatomic) long long cameraViewType; // @synthesize cameraViewType=_cameraViewType;
@property(nonatomic) __weak id <SCCapturer> capturer; // @synthesize capturer=_capturer;
- (void)configureWithCameraToolbar:(id)arg1;
- (void)configureWithView:(id)arg1;
@property(readonly, nonatomic) UIView<SCFeatureContainerView> *containerView; // @synthesize containerView=_containerView;
@property(retain, nonatomic) SCCoreCameraLogger *coreCameraLogger; // @synthesize coreCameraLogger=_coreCameraLogger;
@property(retain, nonatomic) NSDate *creationTime; // @synthesize creationTime=_creationTime;
- (void)dealloc;
@property(nonatomic) __weak id <SCFeatureBatchCaptureDelegate> delegate; // @synthesize delegate=_delegate;
- (void)featureImageCapture:(id)arg1 didCompleteRecoveryWithImage:(id)arg2 captureSessionId:(id)arg3 captureTimeStamp:(id)arg4;
- (void)featureImageCapture:(id)arg1 didCompleteWithError:(id)arg2;
- (void)featureImageCapture:(id)arg1 willCompleteWithStillImageData:(id)arg2 discardRelatedData:(id)arg3;
- (void)featureImageCaptureDidComplete:(id)arg1;
- (_Bool)featureVideoCaptureCameraFlipsWhileRecording:(id)arg1;
- (void)featureVideoCaptureDidAbortRecording:(id)arg1;
- (void)featureVideoCaptureDidCancelRecording:(id)arg1;
- (void)featureVideoCaptureDidCompleteRecovery:(id)arg1 captureSessionId:(id)arg2;
- (void)featureVideoCaptureDidDiscardRecordedVideo:(id)arg1;
- (void)featureVideoCaptureDidFailRecording:(id)arg1;
- (void)featureVideoCaptureDidFinishRecording:(id)arg1;
- (void)featureVideoCaptureDidReachEnd:(id)arg1;
- (void)featureVideoCaptureDidReachUnlimitedMovementThreshhold:(id)arg1;
- (void)featureVideoCaptureDidRemoveInvalidRecordedVideo:(id)arg1;
- (void)featureVideoCaptureDidStopRecording:(id)arg1;
- (_Bool)featureVideoCaptureHandsFreeEnabled:(id)arg1;
- (_Bool)featureVideoCaptureHasStartedRecording:(id)arg1;
- (void)featureVideoCaptureRecordingTooShort:(id)arg1;
- (_Bool)featureVideoCaptureShouldEndRecording:(id)arg1;
- (_Bool)featureVideoCaptureShouldPrepareRecording:(id)arg1;
- (_Bool)featureVideoCaptureShouldStartRecording:(id)arg1;
- (void)featureVideoCaptureWillFinishRecording:(id)arg1 videoSize:(struct CGSize)arg2 placeholderImage:(id)arg3;
- (void)featureVideoCaptureWillStartRecording:(id)arg1;
- (id)initWithCapturer:(id)arg1 userSession:(id)arg2 multiSnap:(id)arg3 userPreferenceTimeProvider:(id)arg4 coreCameraLogger:(id)arg5 applicationLifecycleEvents:(id)arg6 cameraUserActionLogger:(id)arg7;
- (void)interruptGestures;
@property(readonly, nonatomic, getter=isActivated) _Bool activated;
- (void)managedCapturer:(id)arg1 didChangeBatchCaptureActive:(id)arg2;
- (void)managedCapturer:(id)arg1 didChangeCaptureDevicePosition:(id)arg2;
@property(retain, nonatomic) SCManagedCapturerState *managedCapturerState; // @synthesize managedCapturerState=_managedCapturerState;
- (void)prepareForRecording;
- (void)previewViewController:(id)arg1 didRenderFirstFrameForVideoURL:(id)arg2;
- (void)previewViewControllerDidAppear:(id)arg1;
- (void)previewViewControllerDidSendSnap:(id)arg1;
- (void)recoverWithSnapRecoveryDataArray:(id)arg1;
- (void)reset;
- (void)resetMetrics;
- (void)setCameraUIVisible:(_Bool)arg1 animated:(_Bool)arg2 arbitrator:(id)arg3;
- (void)setIsCapturing:(_Bool)arg1;
- (void)setLastSegmentSnappablesDataWithFuture:(id)arg1;
- (_Bool)shouldBlockTouchAtPoint:(struct CGPoint)arg1;
- (_Bool)shouldShowPreviewButton;
- (id)usageMetrics;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

