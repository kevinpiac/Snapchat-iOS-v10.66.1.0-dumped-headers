//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "IGListSectionController.h"

#import "IGListBatchContext-Protocol.h"
#import "IGListCollectionContext-Protocol.h"
#import "IGListDisplayDelegate-Protocol.h"
#import "IGListScrollDelegate-Protocol.h"
#import "IGListWorkingRangeDelegate-Protocol.h"

@class NSArray, NSCountedSet, NSOrderedSet, NSString;
@protocol IGListBatchContext;

@interface IGListStackedSectionController : IGListSectionController <IGListBatchContext, IGListCollectionContext, IGListDisplayDelegate, IGListScrollDelegate, IGListWorkingRangeDelegate>
{
    NSOrderedSet *_sectionControllers;
    NSArray *_sectionControllersForItems;
    NSArray *_sectionControllerOffsets;
    long long _flattenedNumberOfItems;
    NSCountedSet *_visibleSectionControllers;
    id <IGListBatchContext> _forwardingBatchContext;
}

- (void).cxx_destruct;
- (id)_itemIndexesForSectionController:(id)arg1 indexes:(id)arg2;
- (long long)_localIndexForSectionController:(id)arg1 index:(long long)arg2;
- (long long)_relativeIndexForSectionController:(id)arg1 fromLocalIndex:(long long)arg2;
@property(readonly, nonatomic) struct UIEdgeInsets adjustedContainerInset;
- (_Bool)canMoveItemAtIndex:(long long)arg1;
- (_Bool)canMoveItemAtIndex:(long long)arg1 toIndex:(long long)arg2;
- (id)cellForItemAtIndex:(long long)arg1;
- (id)cellForItemAtIndex:(long long)arg1 sectionController:(id)arg2;
@property(readonly, nonatomic) struct UIEdgeInsets containerInset;
@property(readonly, nonatomic) struct CGSize containerSize;
- (struct CGSize)containerSizeForSectionController:(id)arg1;
- (void)deleteInSectionController:(id)arg1 atIndexes:(id)arg2;
- (id)dequeueReusableCellFromStoryboardWithIdentifier:(id)arg1 forSectionController:(id)arg2 atIndex:(long long)arg3;
- (id)dequeueReusableCellOfClass:(Class)arg1 forSectionController:(id)arg2 atIndex:(long long)arg3;
- (id)dequeueReusableCellOfClass:(Class)arg1 withReuseIdentifier:(id)arg2 forSectionController:(id)arg3 atIndex:(long long)arg4;
- (id)dequeueReusableCellWithNibName:(id)arg1 bundle:(id)arg2 forSectionController:(id)arg3 atIndex:(long long)arg4;
- (id)dequeueReusableSupplementaryViewFromStoryboardOfKind:(id)arg1 withIdentifier:(id)arg2 forSectionController:(id)arg3 atIndex:(long long)arg4;
- (id)dequeueReusableSupplementaryViewOfKind:(id)arg1 forSectionController:(id)arg2 class:(Class)arg3 atIndex:(long long)arg4;
- (id)dequeueReusableSupplementaryViewOfKind:(id)arg1 forSectionController:(id)arg2 nibName:(id)arg3 bundle:(id)arg4 atIndex:(long long)arg5;
- (void)deselectItemAtIndex:(long long)arg1 sectionController:(id)arg2 animated:(_Bool)arg3;
- (void)didDeselectItemAtIndex:(long long)arg1;
- (void)didHighlightItemAtIndex:(long long)arg1;
- (void)didSelectItemAtIndex:(long long)arg1;
- (void)didUnhighlightItemAtIndex:(long long)arg1;
- (void)didUpdateToObject:(id)arg1;
@property(nonatomic) long long flattenedNumberOfItems; // @synthesize flattenedNumberOfItems=_flattenedNumberOfItems;
@property(retain, nonatomic) id <IGListBatchContext> forwardingBatchContext; // @synthesize forwardingBatchContext=_forwardingBatchContext;
- (long long)indexForCell:(id)arg1 sectionController:(id)arg2;
- (id)initWithSectionControllers:(id)arg1;
- (void)insertInSectionController:(id)arg1 atIndexes:(id)arg2;
@property(readonly, nonatomic) struct CGSize insetContainerSize;
- (void)invalidateLayoutForSectionController:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)listAdapter:(id)arg1 didEndDeceleratingSectionController:(id)arg2;
- (void)listAdapter:(id)arg1 didEndDisplayingSectionController:(id)arg2;
- (void)listAdapter:(id)arg1 didEndDisplayingSectionController:(id)arg2 cell:(id)arg3 atIndex:(long long)arg4;
- (void)listAdapter:(id)arg1 didEndDraggingSectionController:(id)arg2 willDecelerate:(_Bool)arg3;
- (void)listAdapter:(id)arg1 didScrollSectionController:(id)arg2;
- (void)listAdapter:(id)arg1 sectionControllerDidExitWorkingRange:(id)arg2;
- (void)listAdapter:(id)arg1 sectionControllerWillEnterWorkingRange:(id)arg2;
- (void)listAdapter:(id)arg1 willBeginDraggingSectionController:(id)arg2;
- (void)listAdapter:(id)arg1 willDisplaySectionController:(id)arg2;
- (void)listAdapter:(id)arg1 willDisplaySectionController:(id)arg2 cell:(id)arg3 atIndex:(long long)arg4;
- (void)moveInSectionController:(id)arg1 fromIndex:(long long)arg2 toIndex:(long long)arg3;
- (void)moveInSectionControllerInteractive:(id)arg1 fromIndex:(long long)arg2 toIndex:(long long)arg3;
- (void)moveObjectFromIndex:(long long)arg1 toIndex:(long long)arg2;
- (void)moveSectionControllerInteractive:(id)arg1 fromIndex:(long long)arg2 toIndex:(long long)arg3;
- (long long)numberOfItems;
- (long long)offsetForSectionController:(id)arg1;
- (void)performBatchAnimated:(_Bool)arg1 updates:(CDUnknownBlockType)arg2 completion:(CDUnknownBlockType)arg3;
- (void)reloadData;
- (void)reloadInSectionController:(id)arg1 atIndexes:(id)arg2;
- (void)reloadSectionController:(id)arg1;
- (void)revertInvalidInteractiveMoveFromIndexPath:(id)arg1 toIndexPath:(id)arg2;
- (void)scrollToSectionController:(id)arg1 atIndex:(long long)arg2 scrollPosition:(unsigned long long)arg3 animated:(_Bool)arg4;
- (id)sectionControllerForObjectIndex:(long long)arg1;
@property(copy, nonatomic) NSArray *sectionControllerOffsets; // @synthesize sectionControllerOffsets=_sectionControllerOffsets;
@property(readonly, nonatomic) NSOrderedSet *sectionControllers; // @synthesize sectionControllers=_sectionControllers;
@property(copy, nonatomic) NSArray *sectionControllersForItems; // @synthesize sectionControllersForItems=_sectionControllersForItems;
- (void)selectItemAtIndex:(long long)arg1 sectionController:(id)arg2 animated:(_Bool)arg3 scrollPosition:(unsigned long long)arg4;
- (struct CGSize)sizeForItemAtIndex:(long long)arg1;
- (id)supplementaryViewSource;
- (id)visibleCellsForSectionController:(id)arg1;
- (id)visibleIndexPathsForSectionController:(id)arg1;
@property(readonly, nonatomic) NSCountedSet *visibleSectionControllers; // @synthesize visibleSectionControllers=_visibleSectionControllers;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

