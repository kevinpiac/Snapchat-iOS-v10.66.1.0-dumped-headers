//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct  2 2019 14:24:29).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "SCMapGhostModeTimerControllerDelegate-Protocol.h"

@class NSString, SCEncryptedCache, SCFeatureSettingsManager, SCLocationSharingPreferencesListenerAnnouncer, SCMapFSNService, SCMapGhostModeTimerController, SCMapLocationSharingCacheObject, SCMapSerialAsyncBlockPerformer, SCMapUserPreferences, SCQueuePerformer;
@protocol SCMapNotificationPresenting;

@interface SCLocationSharingPreferencesV1 : NSObject <SCMapGhostModeTimerControllerDelegate>
{
    NSString *_userId;
    id <SCMapNotificationPresenting> _notificationPresenter;
    SCMapFSNService *_mapFSNService;
    SCMapUserPreferences *_mapUserPreferences;
    SCFeatureSettingsManager *_featureSettingsManager;
    SCQueuePerformer *_performer;
    SCMapSerialAsyncBlockPerformer *_asyncBlockPerformer;
    SCMapLocationSharingCacheObject *_mainThreadCacheObject;
    unsigned long long _numberOfFailedSyncAttempts;
    _Bool _shouldDisplayGhostModeTimerDoneNotification;
    double _revalidateCachedPrefsRetryInterval;
    SCEncryptedCache *_cache;
    SCLocationSharingPreferencesListenerAnnouncer *_announcer;
    SCMapGhostModeTimerController *_ghostModeTimerController;
    SCMapLocationSharingCacheObject *_performerThreadCacheObject;
}

- (void).cxx_destruct;
- (void)_announcePreferencesSynced;
- (void)_announcePreferencesUpdated;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_clearOnboardedState;
- (void)_displayGhostModeTimerDoneNotificationIfPossible;
- (void)_ensurePreferencesLoadedFromCacheWithCompletion:(CDUnknownBlockType)arg1;
- (void)_exitGhostModeBecauseTimerExpired;
- (id)_friendIdsArrayForPerFriendModeArray:(id)arg1;
- (_Bool)_hasPreferences;
- (_Bool)_isExplicitlyInGhostModeOrSimilar;
- (id)_preferences;
- (void)_savePerformerThreadCacheObjectToDisk;
- (void)_syncPreferencesToServerIfNecessaryWithSource:(long long)arg1 updateType:(long long)arg2;
- (void)_updateLocationPreferences:(id)arg1 ghostModeDuration:(double)arg2 updateType:(long long)arg3 source:(long long)arg4 completion:(CDUnknownBlockType)arg5;
- (void)_updateWithLatestServerPreferencesWithFetchType:(unsigned long long)arg1 source:(long long)arg2 completion:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) SCLocationSharingPreferencesListenerAnnouncer *announcer; // @synthesize announcer=_announcer;
- (id)blacklistSharingModeFriendIds;
- (id)customSharingModeFriendIds;
- (void)ensureHasPreferencesWithSource:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)ghostMode;
@property(readonly, nonatomic) SCMapGhostModeTimerController *ghostModeTimerController; // @synthesize ghostModeTimerController=_ghostModeTimerController;
- (void)ghostModeTimerController:(id)arg1 wantsToRefreshLocationSharingPreferencesWithCompletion:(CDUnknownBlockType)arg2;
- (void)ghostModeTimerControllerWantsToExitGhostMode:(id)arg1;
- (_Bool)hasFetchedLocationPreferences;
- (_Bool)hasSetPreferences;
- (id)initWithCurrentUserId:(id)arg1 featureSettingManager:(id)arg2 notificationPresenter:(id)arg3 mapFSNService:(id)arg4 mapUserPreferences:(id)arg5;
@property(retain) SCMapLocationSharingCacheObject *mainThreadCacheObject;
- (_Bool)needsPreferencesSync;
@property(retain, nonatomic) SCMapLocationSharingCacheObject *performerThreadCacheObject; // @synthesize performerThreadCacheObject=_performerThreadCacheObject;
- (void)revalidateCachedPreferencesWithSource:(long long)arg1;
- (void)setDidOnboard;
- (void)setGhostMode:(_Bool)arg1 duration:(double)arg2 updateType:(long long)arg3 source:(long long)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setGhostMode:(id)arg1 sharingAudience:(id)arg2 selectFriendsIds:(id)arg3 blacklistedFriendIds:(id)arg4 source:(long long)arg5 completion:(CDUnknownBlockType)arg6;
- (void)setGhostMode:(_Bool)arg1 updateType:(long long)arg2 source:(long long)arg3 completion:(CDUnknownBlockType)arg4;
- (int)sharingAudience;
- (void)updateLocationPreferences:(id)arg1 source:(long long)arg2 completion:(CDUnknownBlockType)arg3;

@end

